

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Dec 21 18:01:11 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Generated 12/10/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F877A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     000E                     	;# 
    86     000F                     	;# 
    87     0010                     	;# 
    88     0011                     	;# 
    89     0012                     	;# 
    90     0013                     	;# 
    91     0014                     	;# 
    92     0015                     	;# 
    93     0015                     	;# 
    94     0016                     	;# 
    95     0017                     	;# 
    96     0018                     	;# 
    97     0019                     	;# 
    98     001A                     	;# 
    99     001B                     	;# 
   100     001B                     	;# 
   101     001C                     	;# 
   102     001D                     	;# 
   103     001E                     	;# 
   104     001F                     	;# 
   105     0081                     	;# 
   106     0085                     	;# 
   107     0086                     	;# 
   108     0087                     	;# 
   109     0088                     	;# 
   110     0089                     	;# 
   111     008C                     	;# 
   112     008D                     	;# 
   113     008E                     	;# 
   114     0091                     	;# 
   115     0092                     	;# 
   116     0093                     	;# 
   117     0094                     	;# 
   118     0098                     	;# 
   119     0099                     	;# 
   120     009C                     	;# 
   121     009D                     	;# 
   122     009E                     	;# 
   123     009F                     	;# 
   124     010C                     	;# 
   125     010D                     	;# 
   126     010E                     	;# 
   127     010F                     	;# 
   128     018C                     	;# 
   129     018D                     	;# 
   130     0000                     	;# 
   131     0001                     	;# 
   132     0002                     	;# 
   133     0003                     	;# 
   134     0004                     	;# 
   135     0005                     	;# 
   136     0006                     	;# 
   137     0007                     	;# 
   138     0008                     	;# 
   139     0009                     	;# 
   140     000A                     	;# 
   141     000B                     	;# 
   142     000C                     	;# 
   143     000D                     	;# 
   144     000E                     	;# 
   145     000E                     	;# 
   146     000F                     	;# 
   147     0010                     	;# 
   148     0011                     	;# 
   149     0012                     	;# 
   150     0013                     	;# 
   151     0014                     	;# 
   152     0015                     	;# 
   153     0015                     	;# 
   154     0016                     	;# 
   155     0017                     	;# 
   156     0018                     	;# 
   157     0019                     	;# 
   158     001A                     	;# 
   159     001B                     	;# 
   160     001B                     	;# 
   161     001C                     	;# 
   162     001D                     	;# 
   163     001E                     	;# 
   164     001F                     	;# 
   165     0081                     	;# 
   166     0085                     	;# 
   167     0086                     	;# 
   168     0087                     	;# 
   169     0088                     	;# 
   170     0089                     	;# 
   171     008C                     	;# 
   172     008D                     	;# 
   173     008E                     	;# 
   174     0091                     	;# 
   175     0092                     	;# 
   176     0093                     	;# 
   177     0094                     	;# 
   178     0098                     	;# 
   179     0099                     	;# 
   180     009C                     	;# 
   181     009D                     	;# 
   182     009E                     	;# 
   183     009F                     	;# 
   184     010C                     	;# 
   185     010D                     	;# 
   186     010E                     	;# 
   187     010F                     	;# 
   188     018C                     	;# 
   189     018D                     	;# 
   190     0019                     _TXREG	set	25
   191     0018                     _RCSTAbits	set	24
   192     001E                     _ADRESH	set	30
   193     001F                     _ADCON0bits	set	31
   194     00FA                     _GO_nDONE	set	250
   195     0031                     _RB1	set	49
   196     0030                     _RB0	set	48
   197     0035                     _RB5	set	53
   198     0034                     _RB4	set	52
   199     0033                     _RB3	set	51
   200     0032                     _RB2	set	50
   201     0099                     _SPBRG	set	153
   202     0098                     _TXSTAbits	set	152
   203     0087                     _TRISCbits	set	135
   204     009E                     _ADRESL	set	158
   205     009F                     _ADCON1bits	set	159
   206     0086                     _TRISB	set	134
   207     042A                     _TRISA2	set	1066
   208     0429                     _TRISA1	set	1065
   209     0428                     _TRISA0	set	1064
   210                           
   211                           	psect	strings
   212     0003                     __pstrings:
   213     0003                     stringtab:
   214     0003                     __stringtab:
   215     0003                     stringcode:	
   216                           ;	String table - string pointers are 1 byte each
   217                           
   218     0003                     stringdir:
   219     0003  3000               	movlw	high stringdir
   220     0004  008A               	movwf	10
   221     0005  0804               	movf	4,w
   222     0006  0A84               	incf	4,f
   223     0007  0782               	addwf	2,f
   224     0008                     __stringbase:
   225     0008  3400               	retlw	0
   226     0009                     __end_of__stringtab:
   227     0009                     STR_1:
   228     0009  3456               	retlw	86	;'V'
   229     000A  3431               	retlw	49	;'1'
   230     000B  343D               	retlw	61	;'='
   231     000C  3425               	retlw	37	;'%'
   232     000D  3464               	retlw	100	;'d'
   233     000E  3400               	retlw	0
   234     000F                     STR_2:
   235     000F  3456               	retlw	86	;'V'
   236     0010  3432               	retlw	50	;'2'
   237     0011  343D               	retlw	61	;'='
   238     0012  3425               	retlw	37	;'%'
   239     0013  3464               	retlw	100	;'d'
   240     0014  3400               	retlw	0
   241     0015                     STR_3:
   242     0015  3456               	retlw	86	;'V'
   243     0016  3433               	retlw	51	;'3'
   244     0017  343D               	retlw	61	;'='
   245     0018  3425               	retlw	37	;'%'
   246     0019  3464               	retlw	100	;'d'
   247     001A  3400               	retlw	0
   248     001B                     STR_4:
   249     001B  3456               	retlw	86	;'V'
   250     001C  3434               	retlw	52	;'4'
   251     001D  343D               	retlw	61	;'='
   252     001E  3425               	retlw	37	;'%'
   253     001F  3464               	retlw	100	;'d'
   254     0020  3400               	retlw	0
   255                           
   256                           	psect	cinit
   257     07E2                     start_initialization:	
   258                           ; #config settings
   259                           
   260     07E2                     __initialization:
   261                           
   262                           ; Clear objects allocated to BANK0
   263     07E2  1383               	bcf	3,7	;select IRP bank0
   264     07E3  3020               	movlw	low __pbssBANK0
   265     07E4  0084               	movwf	4
   266     07E5  3041               	movlw	low (__pbssBANK0+33)
   267     07E6  120A  118A  225E  120A  118A  	fcall	clear_ram0
   268                           
   269                           ; Clear objects allocated to BANK1
   270     07EB  30A0               	movlw	low __pbssBANK1
   271     07EC  0084               	movwf	4
   272     07ED  30DC               	movlw	low (__pbssBANK1+60)
   273     07EE  120A  118A  225E  120A  118A  	fcall	clear_ram0
   274                           
   275                           ; Clear objects allocated to BANK3
   276     07F3  1783               	bsf	3,7	;select IRP bank2
   277     07F4  3090               	movlw	low __pbssBANK3
   278     07F5  0084               	movwf	4
   279     07F6  30B0               	movlw	low (__pbssBANK3+32)
   280     07F7  120A  118A  225E  120A  118A  	fcall	clear_ram0
   281     07FC                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284     07FC                     __end_of__initialization:
   285     07FC  0183               	clrf	3
   286     07FD  120A  118A  2ED3   	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	bssBANK0
   289     0020                     __pbssBANK0:
   290     0020                     _width:
   291     0020                     	ds	2
   292     0022                     _prec:
   293     0022                     	ds	2
   294     0024                     _val4:
   295     0024                     	ds	2
   296     0026                     _val3:
   297     0026                     	ds	2
   298     0028                     _val2:
   299     0028                     	ds	2
   300     002A                     _val:
   301     002A                     	ds	2
   302     002C                     _flags:
   303     002C                     	ds	1
   304     002D                     _s:
   305     002D                     	ds	20
   306                           
   307                           	psect	bssBANK1
   308     00A0                     __pbssBANK1:
   309     00A0                     _s3:
   310     00A0                     	ds	20
   311     00B4                     _s2:
   312     00B4                     	ds	20
   313     00C8                     _s1:
   314     00C8                     	ds	20
   315                           
   316                           	psect	bssBANK3
   317     0190                     __pbssBANK3:
   318     0190                     _dbuf:
   319     0190                     	ds	32
   320                           
   321                           	psect	clrtext
   322     025E                     clear_ram0:	
   323                           ;	Called with FSR containing the base address, and
   324                           ;	W with the last address+1
   325                           
   326     025E  0064               	clrwdt	;clear the watchdog before getting into this loop
   327     025F                     clrloop0:
   328     025F  0180               	clrf	0	;clear RAM location pointed to by FSR
   329     0260  0A84               	incf	4,f	;increment pointer
   330     0261  0604               	xorwf	4,w	;XOR with final address
   331     0262  1903               	btfsc	3,2	;have we reached the end yet?
   332     0263  3400               	retlw	0	;all done for this memory range, return
   333     0264  0604               	xorwf	4,w	;XOR again to restore value
   334     0265  2A5F               	goto	clrloop0	;do the next byte
   335                           
   336                           	psect	cstackCOMMON
   337     0070                     __pcstackCOMMON:
   338     0070                     ?_putch:
   339     0070                     ??_putch:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_Lcd_Port:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ??_Lcd_Port:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_Lcd_Cmd:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_Lcd_Clear:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ?_Lcd_Init:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?_Lcd_Write_Char:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ?_Lcd_Write_String:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ?_LCD:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ??_LCD:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?_ADCInit:	
   370                           ; 1 bytes @ 0x0
   371                           
   372     0070                     ??_ADCInit:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ?_UART_int:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ??_UART_int:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ?_UART_Write:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ??_UART_Write:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ?_main:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ?_fputc:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ?_ADCRead:	
   394                           ; 2 bytes @ 0x0
   395                           
   396     0070                     ?___awdiv:	
   397                           ; 2 bytes @ 0x0
   398                           
   399     0070                     ?___awmod:	
   400                           ; 2 bytes @ 0x0
   401                           
   402     0070                     Lcd_Port@a:	
   403                           ; 2 bytes @ 0x0
   404                           
   405     0070                     UART_Write@data:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     putch@c:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ADCRead@x:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ___awdiv@divisor:	
   415                           ; 2 bytes @ 0x0
   416                           
   417     0070                     ___awmod@divisor:	
   418                           ; 2 bytes @ 0x0
   419                           
   420     0070                     fputc@c:	
   421                           ; 2 bytes @ 0x0
   422                           
   423                           
   424                           ; 2 bytes @ 0x0
   425     0070                     	ds	1
   426     0071                     ??_Lcd_Cmd:
   427     0071                     ??_Lcd_Write_Char:	
   428                           ; 1 bytes @ 0x1
   429                           
   430                           
   431                           ; 1 bytes @ 0x1
   432     0071                     	ds	1
   433     0072                     ??_ADCRead:
   434     0072                     Lcd_Write_Char@temp:	
   435                           ; 1 bytes @ 0x2
   436                           
   437     0072                     fputc@fp:	
   438                           ; 1 bytes @ 0x2
   439                           
   440     0072                     ___awdiv@dividend:	
   441                           ; 1 bytes @ 0x2
   442                           
   443     0072                     ___awmod@dividend:	
   444                           ; 2 bytes @ 0x2
   445                           
   446                           
   447                           ; 2 bytes @ 0x2
   448     0072                     	ds	1
   449     0073                     ??_fputc:
   450     0073                     Lcd_Cmd@a:	
   451                           ; 1 bytes @ 0x3
   452                           
   453     0073                     Lcd_Write_Char@y:	
   454                           ; 1 bytes @ 0x3
   455                           
   456                           
   457                           ; 1 bytes @ 0x3
   458     0073                     	ds	1
   459     0074                     ??_Lcd_Clear:
   460     0074                     ?_Lcd_Set_Cursor:	
   461                           ; 1 bytes @ 0x4
   462                           
   463     0074                     ??_Lcd_Init:	
   464                           ; 1 bytes @ 0x4
   465                           
   466     0074                     ??___awdiv:	
   467                           ; 1 bytes @ 0x4
   468                           
   469     0074                     ??___awmod:	
   470                           ; 1 bytes @ 0x4
   471                           
   472     0074                     Lcd_Set_Cursor@b:	
   473                           ; 1 bytes @ 0x4
   474                           
   475     0074                     Lcd_Write_Char@a:	
   476                           ; 1 bytes @ 0x4
   477                           
   478     0074                     ___awdiv@counter:	
   479                           ; 1 bytes @ 0x4
   480                           
   481     0074                     ___awmod@counter:	
   482                           ; 1 bytes @ 0x4
   483                           
   484                           
   485                           ; 1 bytes @ 0x4
   486     0074                     	ds	1
   487     0075                     ??_Lcd_Set_Cursor:
   488     0075                     ??_Lcd_Write_String:	
   489                           ; 1 bytes @ 0x5
   490                           
   491     0075                     ___awdiv@sign:	
   492                           ; 1 bytes @ 0x5
   493                           
   494     0075                     ___awmod@sign:	
   495                           ; 1 bytes @ 0x5
   496                           
   497                           
   498                           ; 1 bytes @ 0x5
   499     0075                     	ds	1
   500     0076                     ?_abs:
   501     0076                     Lcd_Set_Cursor@a:	
   502                           ; 2 bytes @ 0x6
   503                           
   504     0076                     Lcd_Write_String@i:	
   505                           ; 1 bytes @ 0x6
   506                           
   507     0076                     ___awdiv@quotient:	
   508                           ; 2 bytes @ 0x6
   509                           
   510     0076                     abs@a:	
   511                           ; 2 bytes @ 0x6
   512                           
   513                           
   514                           ; 2 bytes @ 0x6
   515     0076                     	ds	1
   516     0077                     Lcd_Set_Cursor@z:
   517                           
   518                           ; 1 bytes @ 0x7
   519     0077                     	ds	1
   520     0078                     ??_abs:
   521     0078                     Lcd_Set_Cursor@y:	
   522                           ; 1 bytes @ 0x8
   523                           
   524     0078                     Lcd_Write_String@a:	
   525                           ; 1 bytes @ 0x8
   526                           
   527                           
   528                           ; 1 bytes @ 0x8
   529     0078                     	ds	1
   530     0079                     Lcd_Set_Cursor@temp:
   531                           
   532                           ; 1 bytes @ 0x9
   533     0079                     	ds	1
   534     007A                     ?_vfpfcnvrt:
   535     007A                     vfpfcnvrt@fmt:	
   536                           ; 1 bytes @ 0xA
   537                           
   538                           
   539                           ; 1 bytes @ 0xA
   540     007A                     	ds	1
   541     007B                     vfpfcnvrt@ap:
   542                           
   543                           ; 1 bytes @ 0xB
   544     007B                     	ds	1
   545     007C                     ??_vfpfcnvrt:
   546                           
   547                           ; 1 bytes @ 0xC
   548     007C                     	ds	2
   549     007E                     ??_vfprintf:
   550                           
   551                           	psect	cstackBANK0
   552     0041                     __pcstackBANK0:	
   553                           ; 1 bytes @ 0xE
   554                           
   555     0041                     vfpfcnvrt@done:
   556                           
   557                           ; 1 bytes @ 0x0
   558     0041                     	ds	1
   559     0042                     vfpfcnvrt@fp:
   560                           
   561                           ; 1 bytes @ 0x1
   562     0042                     	ds	1
   563     0043                     vfpfcnvrt@cp:
   564                           
   565                           ; 1 bytes @ 0x2
   566     0043                     	ds	1
   567     0044                     vfpfcnvrt@convarg:
   568                           
   569                           ; 4 bytes @ 0x3
   570     0044                     	ds	4
   571     0048                     vfpfcnvrt@c:
   572                           
   573                           ; 1 bytes @ 0x7
   574     0048                     	ds	1
   575     0049                     ?_vfprintf:
   576     0049                     vfprintf@fmt:	
   577                           ; 2 bytes @ 0x8
   578                           
   579                           
   580                           ; 1 bytes @ 0x8
   581     0049                     	ds	1
   582     004A                     vfprintf@ap:
   583                           
   584                           ; 1 bytes @ 0x9
   585     004A                     	ds	1
   586     004B                     vfprintf@fp:
   587                           
   588                           ; 1 bytes @ 0xA
   589     004B                     	ds	1
   590     004C                     vfprintf@cfmt:
   591                           
   592                           ; 1 bytes @ 0xB
   593     004C                     	ds	1
   594     004D                     ?_sprintf:
   595     004D                     sprintf@fmt:	
   596                           ; 2 bytes @ 0xC
   597                           
   598                           
   599                           ; 1 bytes @ 0xC
   600     004D                     	ds	3
   601     0050                     ??_sprintf:
   602                           
   603                           ; 1 bytes @ 0xF
   604     0050                     	ds	1
   605     0051                     sprintf@ap:
   606                           
   607                           ; 1 bytes @ 0x10
   608     0051                     	ds	1
   609     0052                     sprintf@s:
   610                           
   611                           ; 1 bytes @ 0x11
   612     0052                     	ds	1
   613     0053                     sprintf@f:
   614                           
   615                           ; 11 bytes @ 0x12
   616     0053                     	ds	11
   617     005E                     ??_main:
   618                           
   619                           ; 1 bytes @ 0x1D
   620     005E                     	ds	1
   621                           
   622                           	psect	maintext
   623     06D3                     __pmaintext:	
   624 ;;
   625 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   626 ;;
   627 ;; *************** function _main *****************
   628 ;; Defined at:
   629 ;;		line 235 in file "picUART.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : B00/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0
   645 ;;      Temps:          0       1       0       0       0
   646 ;;      Totals:         0       1       0       0       0
   647 ;;Total ram usage:        1 bytes
   648 ;; Hardware stack levels required when called: 5
   649 ;; This function calls:
   650 ;;		_ADCInit
   651 ;;		_ADCRead
   652 ;;		_LCD
   653 ;;		_Lcd_Clear
   654 ;;		_Lcd_Init
   655 ;;		_Lcd_Set_Cursor
   656 ;;		_Lcd_Write_String
   657 ;;		_UART_Write
   658 ;;		_UART_int
   659 ;;		_sprintf
   660 ;; This function is called by:
   661 ;;		Startup code after reset
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665     06D3                     _main:	
   666                           ;psect for function _main
   667                           
   668     06D3                     l1514:	
   669                           ;incstack = 0
   670                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   671                           
   672                           
   673                           ;picUART.c: 236:     UART_int();
   674     06D3  120A  118A  22C0  120A  118A  	fcall	_UART_int
   675     06D8                     l1516:
   676                           
   677                           ;picUART.c: 237:     LCD();
   678     06D8  120A  118A  225A  120A  118A  	fcall	_LCD
   679     06DD                     l1518:
   680                           
   681                           ;picUART.c: 238:     Lcd_Init();
   682     06DD  120A  118A  2496  120A  118A  	fcall	_Lcd_Init
   683                           
   684                           ;picUART.c: 239:     ADCInit();
   685     06E2  120A  118A  2290  120A  118A  	fcall	_ADCInit
   686     06E7                     l1520:
   687                           
   688                           ;picUART.c: 240:     Lcd_Clear();
   689     06E7  120A  118A  2272  120A  118A  	fcall	_Lcd_Clear
   690     06EC                     l1522:
   691                           
   692                           ;picUART.c: 242:         val= ADCRead(0);
   693     06EC  3000               	movlw	0
   694     06ED  00F0               	movwf	ADCRead@x
   695     06EE  00F1               	movwf	ADCRead@x+1
   696     06EF  120A  118A  2392  120A  118A  	fcall	_ADCRead
   697     06F4  0871               	movf	?_ADCRead+1,w
   698     06F5  1283               	bcf	3,5	;RP0=0, select bank0
   699     06F6  1303               	bcf	3,6	;RP1=0, select bank0
   700     06F7  00AB               	movwf	_val+1
   701     06F8  0870               	movf	?_ADCRead,w
   702     06F9  00AA               	movwf	_val
   703     06FA                     l1524:
   704                           
   705                           ;picUART.c: 243:         val2= ADCRead(1);
   706     06FA  3001               	movlw	1
   707     06FB  00F0               	movwf	ADCRead@x
   708     06FC  3000               	movlw	0
   709     06FD  00F1               	movwf	ADCRead@x+1
   710     06FE  120A  118A  2392  120A  118A  	fcall	_ADCRead
   711     0703  0871               	movf	?_ADCRead+1,w
   712     0704  1283               	bcf	3,5	;RP0=0, select bank0
   713     0705  1303               	bcf	3,6	;RP1=0, select bank0
   714     0706  00A9               	movwf	_val2+1
   715     0707  0870               	movf	?_ADCRead,w
   716     0708  00A8               	movwf	_val2
   717     0709                     l1526:
   718                           
   719                           ;picUART.c: 244:         val3= ADCRead(2);
   720     0709  3002               	movlw	2
   721     070A  00F0               	movwf	ADCRead@x
   722     070B  3000               	movlw	0
   723     070C  00F1               	movwf	ADCRead@x+1
   724     070D  120A  118A  2392  120A  118A  	fcall	_ADCRead
   725     0712  0871               	movf	?_ADCRead+1,w
   726     0713  1283               	bcf	3,5	;RP0=0, select bank0
   727     0714  1303               	bcf	3,6	;RP1=0, select bank0
   728     0715  00A7               	movwf	_val3+1
   729     0716  0870               	movf	?_ADCRead,w
   730     0717  00A6               	movwf	_val3
   731     0718                     l1528:
   732                           
   733                           ;picUART.c: 245:         val4= ADCRead(3);
   734     0718  3003               	movlw	3
   735     0719  00F0               	movwf	ADCRead@x
   736     071A  3000               	movlw	0
   737     071B  00F1               	movwf	ADCRead@x+1
   738     071C  120A  118A  2392  120A  118A  	fcall	_ADCRead
   739     0721  0871               	movf	?_ADCRead+1,w
   740     0722  1283               	bcf	3,5	;RP0=0, select bank0
   741     0723  1303               	bcf	3,6	;RP1=0, select bank0
   742     0724  00A5               	movwf	_val4+1
   743     0725  0870               	movf	?_ADCRead,w
   744     0726  00A4               	movwf	_val4
   745     0727                     l1530:
   746                           
   747                           ;picUART.c: 248:   Lcd_Set_Cursor(1, 1);
   748     0727  01F4               	clrf	Lcd_Set_Cursor@b
   749     0728  0AF4               	incf	Lcd_Set_Cursor@b,f
   750     0729  3001               	movlw	1
   751     072A  120A  118A  255B  120A  118A  	fcall	_Lcd_Set_Cursor
   752     072F                     l1532:
   753                           
   754                           ;picUART.c: 249:         sprintf(s,"V1=%d",val);
   755     072F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   756     0730  1283               	bcf	3,5	;RP0=0, select bank0
   757     0731  1303               	bcf	3,6	;RP1=0, select bank0
   758     0732  00CD               	movwf	sprintf@fmt
   759     0733  082B               	movf	_val+1,w
   760     0734  00CF               	movwf	?_sprintf+2
   761     0735  082A               	movf	_val,w
   762     0736  00CE               	movwf	?_sprintf+1
   763     0737  302D               	movlw	(low (_s| 0))& (0+255)
   764     0738  120A  118A  22DA  120A  118A  	fcall	_sprintf
   765     073D                     l1534:
   766                           
   767                           ;picUART.c: 250:   Lcd_Write_String(s);
   768     073D  302D               	movlw	(low (_s| 0))& (0+255)
   769     073E  120A  118A  22F9  120A  118A  	fcall	_Lcd_Write_String
   770     0743                     l1536:
   771                           
   772                           ;picUART.c: 251:         Lcd_Set_Cursor(2, 1);
   773     0743  01F4               	clrf	Lcd_Set_Cursor@b
   774     0744  0AF4               	incf	Lcd_Set_Cursor@b,f
   775     0745  3002               	movlw	2
   776     0746  120A  118A  255B  120A  118A  	fcall	_Lcd_Set_Cursor
   777     074B                     l1538:
   778                           
   779                           ;picUART.c: 252:         sprintf(s1,"V2=%d",val2);
   780     074B  3007               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   781     074C  1283               	bcf	3,5	;RP0=0, select bank0
   782     074D  1303               	bcf	3,6	;RP1=0, select bank0
   783     074E  00CD               	movwf	sprintf@fmt
   784     074F  0829               	movf	_val2+1,w
   785     0750  00CF               	movwf	?_sprintf+2
   786     0751  0828               	movf	_val2,w
   787     0752  00CE               	movwf	?_sprintf+1
   788     0753  30C8               	movlw	(low (_s1| 0))& (0+255)
   789     0754  120A  118A  22DA  120A  118A  	fcall	_sprintf
   790     0759                     l1540:
   791                           
   792                           ;picUART.c: 253:   Lcd_Write_String(s1);
   793     0759  30C8               	movlw	(low (_s1| 0))& (0+255)
   794     075A  120A  118A  22F9  120A  118A  	fcall	_Lcd_Write_String
   795     075F                     l1542:
   796                           
   797                           ;picUART.c: 254:         Lcd_Set_Cursor(3, 1);
   798     075F  01F4               	clrf	Lcd_Set_Cursor@b
   799     0760  0AF4               	incf	Lcd_Set_Cursor@b,f
   800     0761  3003               	movlw	3
   801     0762  120A  118A  255B  120A  118A  	fcall	_Lcd_Set_Cursor
   802     0767                     l1544:
   803                           
   804                           ;picUART.c: 255:         sprintf(s2,"V3=%d",val3);
   805     0767  300D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   806     0768  1283               	bcf	3,5	;RP0=0, select bank0
   807     0769  1303               	bcf	3,6	;RP1=0, select bank0
   808     076A  00CD               	movwf	sprintf@fmt
   809     076B  0827               	movf	_val3+1,w
   810     076C  00CF               	movwf	?_sprintf+2
   811     076D  0826               	movf	_val3,w
   812     076E  00CE               	movwf	?_sprintf+1
   813     076F  30B4               	movlw	(low (_s2| 0))& (0+255)
   814     0770  120A  118A  22DA  120A  118A  	fcall	_sprintf
   815     0775                     l1546:
   816                           
   817                           ;picUART.c: 256:   Lcd_Write_String(s2);
   818     0775  30B4               	movlw	(low (_s2| 0))& (0+255)
   819     0776  120A  118A  22F9  120A  118A  	fcall	_Lcd_Write_String
   820     077B                     l1548:
   821                           
   822                           ;picUART.c: 257:         Lcd_Set_Cursor(4, 1);
   823     077B  01F4               	clrf	Lcd_Set_Cursor@b
   824     077C  0AF4               	incf	Lcd_Set_Cursor@b,f
   825     077D  3004               	movlw	4
   826     077E  120A  118A  255B  120A  118A  	fcall	_Lcd_Set_Cursor
   827     0783                     l1550:
   828                           
   829                           ;picUART.c: 258:         sprintf(s3,"V4=%d",val4);
   830     0783  3013               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   831     0784  1283               	bcf	3,5	;RP0=0, select bank0
   832     0785  1303               	bcf	3,6	;RP1=0, select bank0
   833     0786  00CD               	movwf	sprintf@fmt
   834     0787  0825               	movf	_val4+1,w
   835     0788  00CF               	movwf	?_sprintf+2
   836     0789  0824               	movf	_val4,w
   837     078A  00CE               	movwf	?_sprintf+1
   838     078B  30A0               	movlw	(low (_s3| 0))& (0+255)
   839     078C  120A  118A  22DA  120A  118A  	fcall	_sprintf
   840     0791                     l1552:
   841                           
   842                           ;picUART.c: 259:   Lcd_Write_String(s3);
   843     0791  30A0               	movlw	(low (_s3| 0))& (0+255)
   844     0792  120A  118A  22F9  120A  118A  	fcall	_Lcd_Write_String
   845     0797                     l1554:
   846                           
   847                           ;picUART.c: 263:         UART_Write(val >> 8);
   848     0797  1283               	bcf	3,5	;RP0=0, select bank0
   849     0798  1303               	bcf	3,6	;RP1=0, select bank0
   850     0799  082B               	movf	_val+1,w
   851     079A  120A  118A  2266  120A  118A  	fcall	_UART_Write
   852     079F                     l1556:
   853                           
   854                           ;picUART.c: 264:         UART_Write(val & 0xFF);
   855     079F  1283               	bcf	3,5	;RP0=0, select bank0
   856     07A0  1303               	bcf	3,6	;RP1=0, select bank0
   857     07A1  082A               	movf	_val,w
   858     07A2  120A  118A  2266  120A  118A  	fcall	_UART_Write
   859     07A7                     l1558:
   860                           
   861                           ;picUART.c: 266:         UART_Write(val2 >> 8);
   862     07A7  1283               	bcf	3,5	;RP0=0, select bank0
   863     07A8  1303               	bcf	3,6	;RP1=0, select bank0
   864     07A9  0829               	movf	_val2+1,w
   865     07AA  120A  118A  2266  120A  118A  	fcall	_UART_Write
   866     07AF                     l1560:
   867                           
   868                           ;picUART.c: 267:         UART_Write(val2 & 0xFF);
   869     07AF  1283               	bcf	3,5	;RP0=0, select bank0
   870     07B0  1303               	bcf	3,6	;RP1=0, select bank0
   871     07B1  0828               	movf	_val2,w
   872     07B2  120A  118A  2266  120A  118A  	fcall	_UART_Write
   873     07B7                     l1562:
   874                           
   875                           ;picUART.c: 269:         UART_Write(val3 >> 8);
   876     07B7  1283               	bcf	3,5	;RP0=0, select bank0
   877     07B8  1303               	bcf	3,6	;RP1=0, select bank0
   878     07B9  0827               	movf	_val3+1,w
   879     07BA  120A  118A  2266  120A  118A  	fcall	_UART_Write
   880     07BF                     l1564:
   881                           
   882                           ;picUART.c: 270:         UART_Write(val3 & 0xFF);
   883     07BF  1283               	bcf	3,5	;RP0=0, select bank0
   884     07C0  1303               	bcf	3,6	;RP1=0, select bank0
   885     07C1  0826               	movf	_val3,w
   886     07C2  120A  118A  2266  120A  118A  	fcall	_UART_Write
   887     07C7                     l1566:
   888                           
   889                           ;picUART.c: 272:         UART_Write(val4 >> 8);
   890     07C7  1283               	bcf	3,5	;RP0=0, select bank0
   891     07C8  1303               	bcf	3,6	;RP1=0, select bank0
   892     07C9  0825               	movf	_val4+1,w
   893     07CA  120A  118A  2266  120A  118A  	fcall	_UART_Write
   894     07CF                     l1568:
   895                           
   896                           ;picUART.c: 273:         UART_Write(val4 & 0xFF);
   897     07CF  1283               	bcf	3,5	;RP0=0, select bank0
   898     07D0  1303               	bcf	3,6	;RP1=0, select bank0
   899     07D1  0824               	movf	_val4,w
   900     07D2  120A  118A  2266  120A  118A  	fcall	_UART_Write
   901                           
   902                           ;picUART.c: 275:         _delay((unsigned long)((100)*(20000000/4000000.0)));
   903     07D7  30A5               	movlw	165
   904     07D8  1283               	bcf	3,5	;RP0=0, select bank0
   905     07D9  1303               	bcf	3,6	;RP1=0, select bank0
   906     07DA  00DE               	movwf	??_main
   907     07DB                     u1057:
   908     07DB  0BDE               	decfsz	??_main,f
   909     07DC  2FDB               	goto	u1057
   910     07DD  2FDE               	nop2
   911     07DE  2EEC               	goto	l1522
   912     07DF  120A  118A  2800   	ljmp	start
   913     07E2                     __end_of_main:
   914                           
   915                           	psect	text1
   916     02DA                     __ptext1:	
   917 ;; *************** function _sprintf *****************
   918 ;; Defined at:
   919 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  s               1    wreg     PTR unsigned char 
   922 ;;		 -> s3(20), s2(20), s1(20), s(20), 
   923 ;;  fmt             1   12[BANK0 ] PTR const unsigned char 
   924 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(6), 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  s               1   17[BANK0 ] PTR unsigned char 
   927 ;;		 -> s3(20), s2(20), s1(20), s(20), 
   928 ;;  f              11   18[BANK0 ] struct _IO_FILE
   929 ;;  ret             2    0        int 
   930 ;;  ap              1   16[BANK0 ] PTR void [1]
   931 ;;		 -> ?_sprintf(2), 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  2   12[BANK0 ] int 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       3       0       0       0
   942 ;;      Locals:         0      13       0       0       0
   943 ;;      Temps:          0       1       0       0       0
   944 ;;      Totals:         0      17       0       0       0
   945 ;;Total ram usage:       17 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; Hardware stack levels required when called: 4
   948 ;; This function calls:
   949 ;;		_vfprintf
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955     02DA                     _sprintf:	
   956                           ;psect for function _sprintf
   957                           
   958                           
   959                           ;incstack = 0
   960                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   961                           ;sprintf@s stored from wreg
   962     02DA  1283               	bcf	3,5	;RP0=0, select bank0
   963     02DB  1303               	bcf	3,6	;RP1=0, select bank0
   964     02DC  00D2               	movwf	sprintf@s
   965     02DD                     l1490:
   966     02DD  304E               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   967     02DE  00D1               	movwf	sprintf@ap
   968     02DF  0852               	movf	sprintf@s,w
   969     02E0  00D3               	movwf	sprintf@f
   970     02E1                     l1492:
   971     02E1  01D5               	clrf	sprintf@f+2
   972     02E2  01D6               	clrf	sprintf@f+3
   973     02E3                     l1494:
   974     02E3  01DC               	clrf	sprintf@f+9
   975     02E4  01DD               	clrf	sprintf@f+10
   976     02E5                     l1496:
   977     02E5  084D               	movf	sprintf@fmt,w
   978     02E6  00C9               	movwf	vfprintf@fmt
   979     02E7  3051               	movlw	(low (sprintf@ap| 0))& (0+255)
   980     02E8  00CA               	movwf	vfprintf@ap
   981     02E9  3053               	movlw	(low (sprintf@f| 0))& (0+255)
   982     02EA  120A  118A  231A  120A  118A  	fcall	_vfprintf
   983     02EF                     l1498:
   984     02EF  1283               	bcf	3,5	;RP0=0, select bank0
   985     02F0  1303               	bcf	3,6	;RP1=0, select bank0
   986     02F1  0855               	movf	sprintf@f+2,w
   987     02F2  0752               	addwf	sprintf@s,w
   988     02F3  00D0               	movwf	??_sprintf
   989     02F4  0850               	movf	??_sprintf,w
   990     02F5  0084               	movwf	4
   991     02F6  1383               	bcf	3,7	;select IRP bank0
   992     02F7  0180               	clrf	0
   993     02F8                     l698:
   994     02F8  0008               	return
   995     02F9                     __end_of_sprintf:
   996                           
   997                           	psect	text2
   998     031A                     __ptext2:	
   999 ;; *************** function _vfprintf *****************
  1000 ;; Defined at:
  1001 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  fp              1    wreg     PTR struct _IO_FILE
  1004 ;;		 -> sprintf@f(11), 
  1005 ;;  fmt             1    8[BANK0 ] PTR const unsigned char 
  1006 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(6), 
  1007 ;;  ap              1    9[BANK0 ] PTR PTR void 
  1008 ;;		 -> sprintf@ap(1), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  fp              1   10[BANK0 ] PTR struct _IO_FILE
  1011 ;;		 -> sprintf@f(11), 
  1012 ;;  cfmt            1   11[BANK0 ] PTR unsigned char 
  1013 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(6), 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  2    8[BANK0 ] int 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1023 ;;      Params:         0       2       0       0       0
  1024 ;;      Locals:         0       2       0       0       0
  1025 ;;      Temps:          0       0       0       0       0
  1026 ;;      Totals:         0       4       0       0       0
  1027 ;;Total ram usage:        4 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 3
  1030 ;; This function calls:
  1031 ;;		_vfpfcnvrt
  1032 ;; This function is called by:
  1033 ;;		_sprintf
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037     031A                     _vfprintf:	
  1038                           ;psect for function _vfprintf
  1039                           
  1040                           
  1041                           ;incstack = 0
  1042                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1043                           ;vfprintf@fp stored from wreg
  1044     031A  1283               	bcf	3,5	;RP0=0, select bank0
  1045     031B  1303               	bcf	3,6	;RP1=0, select bank0
  1046     031C  00CB               	movwf	vfprintf@fp
  1047     031D                     l1378:
  1048                           
  1049                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1050     031D  0849               	movf	vfprintf@fmt,w
  1051     031E  00CC               	movwf	vfprintf@cfmt
  1052                           
  1053                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1054     031F  2B2A               	goto	l1382
  1055     0320                     l1380:
  1056                           
  1057                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1058     0320  304C               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1059     0321  00FA               	movwf	vfpfcnvrt@fmt
  1060     0322  084A               	movf	vfprintf@ap,w
  1061     0323  00FB               	movwf	vfpfcnvrt@ap
  1062     0324  084B               	movf	vfprintf@fp,w
  1063     0325  120A  118A  25E8  120A  118A  	fcall	_vfpfcnvrt
  1064     032A                     l1382:
  1065                           
  1066                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1067     032A  1283               	bcf	3,5	;RP0=0, select bank0
  1068     032B  1303               	bcf	3,6	;RP1=0, select bank0
  1069     032C  084C               	movf	vfprintf@cfmt,w
  1070     032D  0084               	movwf	4
  1071     032E  120A  118A  2003  120A  118A  	fcall	stringdir
  1072     0333  3A00               	xorlw	0
  1073     0334  1D03               	skipz
  1074     0335  2B37               	goto	u921
  1075     0336  2B38               	goto	u920
  1076     0337                     u921:
  1077     0337  2B20               	goto	l1380
  1078     0338                     u920:
  1079     0338                     l1384:
  1080                           
  1081                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1082     0338  01C9               	clrf	?_vfprintf
  1083     0339  01CA               	clrf	?_vfprintf+1
  1084     033A                     l742:
  1085     033A  0008               	return
  1086     033B                     __end_of_vfprintf:
  1087                           
  1088                           	psect	text3
  1089     05E8                     __ptext3:	
  1090 ;; *************** function _vfpfcnvrt *****************
  1091 ;; Defined at:
  1092 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  fp              1    wreg     PTR struct _IO_FILE
  1095 ;;		 -> sprintf@f(11), 
  1096 ;;  fmt             1   10[COMMON] PTR PTR unsigned char 
  1097 ;;		 -> vfprintf@cfmt(1), 
  1098 ;;  ap              1   11[COMMON] PTR PTR void 
  1099 ;;		 -> sprintf@ap(1), 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  fp              1    1[BANK0 ] PTR struct _IO_FILE
  1102 ;;		 -> sprintf@f(11), 
  1103 ;;  convarg         4    3[BANK0 ] struct .
  1104 ;;  c               1    7[BANK0 ] unsigned char 
  1105 ;;  cp              1    2[BANK0 ] PTR unsigned char 
  1106 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(6), 
  1107 ;;  done            1    0[BANK0 ] _Bool 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1117 ;;      Params:         2       0       0       0       0
  1118 ;;      Locals:         0       8       0       0       0
  1119 ;;      Temps:          2       0       0       0       0
  1120 ;;      Totals:         4       8       0       0       0
  1121 ;;Total ram usage:       12 bytes
  1122 ;; Hardware stack levels used: 1
  1123 ;; Hardware stack levels required when called: 2
  1124 ;; This function calls:
  1125 ;;		___awdiv
  1126 ;;		___awmod
  1127 ;;		_abs
  1128 ;;		_fputc
  1129 ;; This function is called by:
  1130 ;;		_vfprintf
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134     05E8                     _vfpfcnvrt:	
  1135                           ;psect for function _vfpfcnvrt
  1136                           
  1137                           
  1138                           ;incstack = 0
  1139                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1140                           ;vfpfcnvrt@fp stored from wreg
  1141     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1142     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1143     05EA  00C2               	movwf	vfpfcnvrt@fp
  1144     05EB                     l1296:
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1147     05EB  087A               	movf	vfpfcnvrt@fmt,w
  1148     05EC  0084               	movwf	4
  1149     05ED  1383               	bcf	3,7	;select IRP bank0
  1150     05EE  0800               	movf	0,w
  1151     05EF  0084               	movwf	4
  1152     05F0  120A  118A  2003  120A  118A  	fcall	stringdir
  1153     05F5  3A25               	xorlw	37
  1154     05F6  1D03               	skipz
  1155     05F7  2DF9               	goto	u811
  1156     05F8  2DFA               	goto	u810
  1157     05F9                     u811:
  1158     05F9  2EBB               	goto	l1342
  1159     05FA                     u810:
  1160     05FA                     l1298:
  1161                           
  1162                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1163     05FA  3001               	movlw	1
  1164     05FB  00FF               	movwf	btemp+1
  1165     05FC  087A               	movf	vfpfcnvrt@fmt,w
  1166     05FD  0084               	movwf	4
  1167     05FE  087F               	movf	btemp+1,w
  1168     05FF  0780               	addwf	0,f
  1169     0600                     l1300:
  1170                           
  1171                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1172     0600  01A0               	clrf	_width
  1173     0601  01A1               	clrf	_width+1
  1174     0602  1003               	clrc
  1175     0603  3000               	movlw	0
  1176     0604  1803               	btfsc	3,0
  1177     0605  3001               	movlw	1
  1178     0606  00AC               	movwf	_flags
  1179     0607                     l1302:
  1180                           
  1181                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1182     0607  30FF               	movlw	255
  1183     0608  00A2               	movwf	_prec
  1184     0609  30FF               	movlw	255
  1185     060A  00A3               	movwf	_prec+1
  1186     060B                     l1304:
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1189     060B  087A               	movf	vfpfcnvrt@fmt,w
  1190     060C  0084               	movwf	4
  1191     060D  0800               	movf	0,w
  1192     060E  00C3               	movwf	vfpfcnvrt@cp
  1193     060F                     l1306:
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1196     060F  0843               	movf	vfpfcnvrt@cp,w
  1197     0610  0084               	movwf	4
  1198     0611  120A  118A  2003  120A  118A  	fcall	stringdir
  1199     0616  3A64               	xorlw	100
  1200     0617  1903               	skipnz
  1201     0618  2E1A               	goto	u821
  1202     0619  2E1B               	goto	u820
  1203     061A                     u821:
  1204     061A  2E27               	goto	l1310
  1205     061B                     u820:
  1206     061B                     l1308:
  1207     061B  0843               	movf	vfpfcnvrt@cp,w
  1208     061C  0084               	movwf	4
  1209     061D  120A  118A  2003  120A  118A  	fcall	stringdir
  1210     0622  3A69               	xorlw	105
  1211     0623  1D03               	skipz
  1212     0624  2E26               	goto	u831
  1213     0625  2E27               	goto	u830
  1214     0626                     u831:
  1215     0626  2EB3               	goto	l1338
  1216     0627                     u830:
  1217     0627                     l1310:
  1218                           
  1219                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1220     0627  087B               	movf	vfpfcnvrt@ap,w
  1221     0628  0084               	movwf	4
  1222     0629  0800               	movf	0,w
  1223     062A  00FF               	movwf	btemp+1
  1224     062B  3002               	movlw	2
  1225     062C  0780               	addwf	0,f
  1226     062D  087F               	movf	btemp+1,w
  1227     062E  0084               	movwf	4
  1228     062F  0800               	movf	0,w
  1229     0630  00C4               	movwf	vfpfcnvrt@convarg
  1230     0631  0A84               	incf	4,f
  1231     0632  0800               	movf	0,w
  1232     0633  00C5               	movwf	vfpfcnvrt@convarg+1
  1233     0634                     l1312:
  1234                           
  1235                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1236     0634  087A               	movf	vfpfcnvrt@fmt,w
  1237     0635  0084               	movwf	4
  1238     0636  0843               	movf	vfpfcnvrt@cp,w
  1239     0637  3E01               	addlw	1
  1240     0638  0080               	movwf	0
  1241     0639                     l1314:
  1242                           
  1243                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1244     0639  3020               	movlw	32
  1245     063A  00C8               	movwf	vfpfcnvrt@c
  1246     063B                     l1316:
  1247                           
  1248                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1249     063B  1BC5               	btfsc	vfpfcnvrt@convarg+1,7
  1250     063C  2E3E               	goto	u841
  1251     063D  2E40               	goto	u840
  1252     063E                     u841:
  1253     063E  3001               	movlw	1
  1254     063F  2E41               	goto	u850
  1255     0640                     u840:
  1256     0640  3000               	movlw	0
  1257     0641                     u850:
  1258     0641  00C1               	movwf	vfpfcnvrt@done
  1259     0642                     l1318:
  1260                           
  1261                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1262     0642  3001               	movlw	1
  1263     0643  02C8               	subwf	vfpfcnvrt@c,f
  1264     0644  0848               	movf	vfpfcnvrt@c,w
  1265     0645  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  1266     0646  0084               	movwf	4
  1267     0647  300A               	movlw	10
  1268     0648  00F0               	movwf	___awmod@divisor
  1269     0649  3000               	movlw	0
  1270     064A  00F1               	movwf	___awmod@divisor+1
  1271     064B  0845               	movf	vfpfcnvrt@convarg+1,w
  1272     064C  00F3               	movwf	___awmod@dividend+1
  1273     064D  0844               	movf	vfpfcnvrt@convarg,w
  1274     064E  00F2               	movwf	___awmod@dividend
  1275     064F  120A  118A  243D  120A  118A  	fcall	___awmod
  1276     0654  0871               	movf	?___awmod+1,w
  1277     0655  00F7               	movwf	abs@a+1
  1278     0656  0870               	movf	?___awmod,w
  1279     0657  00F6               	movwf	abs@a
  1280     0658  120A  118A  227F  120A  118A  	fcall	_abs
  1281     065D  0876               	movf	?_abs,w
  1282     065E  3E30               	addlw	48
  1283     065F  1783               	bsf	3,7	;select IRP bank3
  1284     0660  0080               	movwf	0
  1285     0661                     l1320:
  1286                           
  1287                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1288     0661  300A               	movlw	10
  1289     0662  00F0               	movwf	___awdiv@divisor
  1290     0663  3000               	movlw	0
  1291     0664  00F1               	movwf	___awdiv@divisor+1
  1292     0665  1283               	bcf	3,5	;RP0=0, select bank0
  1293     0666  1303               	bcf	3,6	;RP1=0, select bank0
  1294     0667  0845               	movf	vfpfcnvrt@convarg+1,w
  1295     0668  00F3               	movwf	___awdiv@dividend+1
  1296     0669  0844               	movf	vfpfcnvrt@convarg,w
  1297     066A  00F2               	movwf	___awdiv@dividend
  1298     066B  120A  118A  24F4  120A  118A  	fcall	___awdiv
  1299     0670  0871               	movf	?___awdiv+1,w
  1300     0671  1283               	bcf	3,5	;RP0=0, select bank0
  1301     0672  1303               	bcf	3,6	;RP1=0, select bank0
  1302     0673  00C5               	movwf	vfpfcnvrt@convarg+1
  1303     0674  0870               	movf	?___awdiv,w
  1304     0675  00C4               	movwf	vfpfcnvrt@convarg
  1305     0676                     l1322:
  1306                           
  1307                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1308     0676  0844               	movf	vfpfcnvrt@convarg,w
  1309     0677  0445               	iorwf	vfpfcnvrt@convarg+1,w
  1310     0678  1903               	btfsc	3,2
  1311     0679  2E7B               	goto	u861
  1312     067A  2E7C               	goto	u860
  1313     067B                     u861:
  1314     067B  2E81               	goto	l1326
  1315     067C                     u860:
  1316     067C                     l1324:
  1317     067C  0848               	movf	vfpfcnvrt@c,w
  1318     067D  1D03               	btfss	3,2
  1319     067E  2E80               	goto	u871
  1320     067F  2E81               	goto	u870
  1321     0680                     u871:
  1322     0680  2E42               	goto	l1318
  1323     0681                     u870:
  1324     0681                     l1326:
  1325                           
  1326                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1327     0681  0848               	movf	vfpfcnvrt@c,w
  1328     0682  1903               	btfsc	3,2
  1329     0683  2E85               	goto	u881
  1330     0684  2E86               	goto	u880
  1331     0685                     u881:
  1332     0685  2EAC               	goto	l1336
  1333     0686                     u880:
  1334     0686                     l1328:
  1335     0686  0841               	movf	vfpfcnvrt@done,w
  1336     0687  1903               	btfsc	3,2
  1337     0688  2E8A               	goto	u891
  1338     0689  2E8B               	goto	u890
  1339     068A                     u891:
  1340     068A  2EAC               	goto	l1336
  1341     068B                     u890:
  1342     068B                     l1330:
  1343                           
  1344                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1345     068B  3001               	movlw	1
  1346     068C  02C8               	subwf	vfpfcnvrt@c,f
  1347     068D  0848               	movf	vfpfcnvrt@c,w
  1348     068E  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  1349     068F  0084               	movwf	4
  1350     0690  302D               	movlw	45
  1351     0691  1783               	bsf	3,7	;select IRP bank3
  1352     0692  0080               	movwf	0
  1353     0693  2EAC               	goto	l1336
  1354     0694                     l1332:
  1355                           
  1356                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1357     0694  0848               	movf	vfpfcnvrt@c,w
  1358     0695  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  1359     0696  0084               	movwf	4
  1360     0697  1783               	bsf	3,7	;select IRP bank3
  1361     0698  0800               	movf	0,w
  1362     0699  00FC               	movwf	??_vfpfcnvrt
  1363     069A  01FD               	clrf	??_vfpfcnvrt+1
  1364     069B  087C               	movf	??_vfpfcnvrt,w
  1365     069C  00F0               	movwf	fputc@c
  1366     069D  087D               	movf	??_vfpfcnvrt+1,w
  1367     069E  00F1               	movwf	fputc@c+1
  1368     069F  0842               	movf	vfpfcnvrt@fp,w
  1369     06A0  00F2               	movwf	fputc@fp
  1370     06A1  120A  118A  23E7  120A  118A  	fcall	_fputc
  1371     06A6                     l1334:
  1372     06A6  3001               	movlw	1
  1373     06A7  00FF               	movwf	btemp+1
  1374     06A8  087F               	movf	btemp+1,w
  1375     06A9  1283               	bcf	3,5	;RP0=0, select bank0
  1376     06AA  1303               	bcf	3,6	;RP1=0, select bank0
  1377     06AB  07C8               	addwf	vfpfcnvrt@c,f
  1378     06AC                     l1336:
  1379                           
  1380                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1381     06AC  3020               	movlw	32
  1382     06AD  0648               	xorwf	vfpfcnvrt@c,w
  1383     06AE  1D03               	btfss	3,2
  1384     06AF  2EB1               	goto	u901
  1385     06B0  2EB2               	goto	u900
  1386     06B1                     u901:
  1387     06B1  2E94               	goto	l1332
  1388     06B2                     u900:
  1389     06B2  2ED2               	goto	l736
  1390     06B3                     l1338:
  1391                           
  1392                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1393     06B3  3001               	movlw	1
  1394     06B4  00FF               	movwf	btemp+1
  1395     06B5  087A               	movf	vfpfcnvrt@fmt,w
  1396     06B6  0084               	movwf	4
  1397     06B7  087F               	movf	btemp+1,w
  1398     06B8  1383               	bcf	3,7	;select IRP bank0
  1399     06B9  0780               	addwf	0,f
  1400     06BA  2ED2               	goto	l736
  1401     06BB                     l1342:
  1402                           
  1403                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1404     06BB  087A               	movf	vfpfcnvrt@fmt,w
  1405     06BC  0084               	movwf	4
  1406     06BD  0800               	movf	0,w
  1407     06BE  0084               	movwf	4
  1408     06BF  120A  118A  2003  120A  118A  	fcall	stringdir
  1409     06C4  00FC               	movwf	??_vfpfcnvrt
  1410     06C5  01FD               	clrf	??_vfpfcnvrt+1
  1411     06C6  087C               	movf	??_vfpfcnvrt,w
  1412     06C7  00F0               	movwf	fputc@c
  1413     06C8  087D               	movf	??_vfpfcnvrt+1,w
  1414     06C9  00F1               	movwf	fputc@c+1
  1415     06CA  0842               	movf	vfpfcnvrt@fp,w
  1416     06CB  00F2               	movwf	fputc@fp
  1417     06CC  120A  118A  23E7  120A  118A  	fcall	_fputc
  1418     06D1  2EB3               	goto	l1338
  1419     06D2                     l736:
  1420     06D2  0008               	return
  1421     06D3                     __end_of_vfpfcnvrt:
  1422                           
  1423                           	psect	text4
  1424     03E7                     __ptext4:	
  1425 ;; *************** function _fputc *****************
  1426 ;; Defined at:
  1427 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  c               2    0[COMMON] int 
  1430 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  1431 ;;		 -> sprintf@f(11), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  2    0[COMMON] int 
  1436 ;; Registers used:
  1437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1443 ;;      Params:         3       0       0       0       0
  1444 ;;      Locals:         0       0       0       0       0
  1445 ;;      Temps:          5       0       0       0       0
  1446 ;;      Totals:         8       0       0       0       0
  1447 ;;Total ram usage:        8 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 1
  1450 ;; This function calls:
  1451 ;;		_putch
  1452 ;; This function is called by:
  1453 ;;		_vfpfcnvrt
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457     03E7                     _fputc:	
  1458                           ;psect for function _fputc
  1459                           
  1460     03E7                     l1264:	
  1461                           ;incstack = 0
  1462                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1463                           
  1464     03E7  0872               	movf	fputc@fp,w
  1465     03E8  1903               	btfsc	3,2
  1466     03E9  2BEB               	goto	u721
  1467     03EA  2BEC               	goto	u720
  1468     03EB                     u721:
  1469     03EB  2BF1               	goto	l1268
  1470     03EC                     u720:
  1471     03EC                     l1266:
  1472     03EC  0872               	movf	fputc@fp,w
  1473     03ED  1D03               	btfss	3,2
  1474     03EE  2BF0               	goto	u731
  1475     03EF  2BF1               	goto	u730
  1476     03F0                     u731:
  1477     03F0  2BF8               	goto	l1270
  1478     03F1                     u730:
  1479     03F1                     l1268:
  1480     03F1  0870               	movf	fputc@c,w
  1481     03F2  120A  118A  2259  120A  118A  	fcall	_putch
  1482     03F7  2C3C               	goto	l761
  1483     03F8                     l1270:
  1484     03F8  0872               	movf	fputc@fp,w
  1485     03F9  3E09               	addlw	9
  1486     03FA  0084               	movwf	4
  1487     03FB  1383               	bcf	3,7	;select IRP bank0
  1488     03FC  0800               	movf	0,w
  1489     03FD  00F3               	movwf	??_fputc
  1490     03FE  0A84               	incf	4,f
  1491     03FF  0800               	movf	0,w
  1492     0400  00F4               	movwf	??_fputc+1
  1493     0401  0873               	movf	??_fputc,w
  1494     0402  0474               	iorwf	??_fputc+1,w
  1495     0403  1903               	btfsc	3,2
  1496     0404  2C06               	goto	u741
  1497     0405  2C07               	goto	u740
  1498     0406                     u741:
  1499     0406  2C25               	goto	l1274
  1500     0407                     u740:
  1501     0407                     l1272:
  1502     0407  0872               	movf	fputc@fp,w
  1503     0408  3E09               	addlw	9
  1504     0409  0084               	movwf	4
  1505     040A  0800               	movf	0,w
  1506     040B  00F3               	movwf	??_fputc
  1507     040C  0A84               	incf	4,f
  1508     040D  0800               	movf	0,w
  1509     040E  00F4               	movwf	??_fputc+1
  1510     040F  0872               	movf	fputc@fp,w
  1511     0410  3E02               	addlw	2
  1512     0411  0084               	movwf	4
  1513     0412  0800               	movf	0,w
  1514     0413  00F5               	movwf	??_fputc+2
  1515     0414  0A84               	incf	4,f
  1516     0415  0800               	movf	0,w
  1517     0416  00F6               	movwf	??_fputc+3
  1518     0417  0876               	movf	??_fputc+3,w
  1519     0418  3A80               	xorlw	128
  1520     0419  00F7               	movwf	??_fputc+4
  1521     041A  0874               	movf	??_fputc+1,w
  1522     041B  3A80               	xorlw	128
  1523     041C  0277               	subwf	??_fputc+4,w
  1524     041D  1D03               	skipz
  1525     041E  2C21               	goto	u755
  1526     041F  0873               	movf	??_fputc,w
  1527     0420  0275               	subwf	??_fputc+2,w
  1528     0421                     u755:
  1529     0421  1803               	skipnc
  1530     0422  2C24               	goto	u751
  1531     0423  2C25               	goto	u750
  1532     0424                     u751:
  1533     0424  2C3C               	goto	l761
  1534     0425                     u750:
  1535     0425                     l1274:
  1536     0425  0872               	movf	fputc@fp,w
  1537     0426  3E02               	addlw	2
  1538     0427  0084               	movwf	4
  1539     0428  1383               	bcf	3,7	;select IRP bank0
  1540     0429  0800               	movf	0,w
  1541     042A  00F3               	movwf	??_fputc
  1542     042B  0872               	movf	fputc@fp,w
  1543     042C  0084               	movwf	4
  1544     042D  0800               	movf	0,w
  1545     042E  0773               	addwf	??_fputc,w
  1546     042F  00F4               	movwf	??_fputc+1
  1547     0430  0874               	movf	??_fputc+1,w
  1548     0431  0084               	movwf	4
  1549     0432  0870               	movf	fputc@c,w
  1550     0433  0080               	movwf	0
  1551     0434  0872               	movf	fputc@fp,w
  1552     0435  3E02               	addlw	2
  1553     0436  0084               	movwf	4
  1554     0437  3001               	movlw	1
  1555     0438  0780               	addwf	0,f
  1556     0439  0A84               	incf	4,f
  1557     043A  1803               	skipnc
  1558     043B  0A80               	incf	0,f
  1559     043C                     l761:
  1560     043C  0008               	return
  1561     043D                     __end_of_fputc:
  1562                           
  1563                           	psect	text5
  1564     0259                     __ptext5:	
  1565 ;; *************** function _putch *****************
  1566 ;; Defined at:
  1567 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  c               1    wreg     unsigned char 
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  c               1    0[COMMON] unsigned char 
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  1    wreg      void 
  1574 ;; Registers used:
  1575 ;;		wreg
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1581 ;;      Params:         0       0       0       0       0
  1582 ;;      Locals:         0       0       0       0       0
  1583 ;;      Temps:          0       0       0       0       0
  1584 ;;      Totals:         0       0       0       0       0
  1585 ;;Total ram usage:        0 bytes
  1586 ;; Hardware stack levels used: 1
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_fputc
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594     0259                     _putch:	
  1595                           ;psect for function _putch
  1596                           
  1597     0259                     l772:	
  1598                           ;incstack = 0
  1599                           ; Regs used in _putch: [wreg]
  1600                           
  1601     0259  0008               	return
  1602     025A                     __end_of_putch:
  1603                           
  1604                           	psect	text6
  1605     027F                     __ptext6:	
  1606 ;; *************** function _abs *****************
  1607 ;; Defined at:
  1608 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  a               2    6[COMMON] int 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2    6[COMMON] int 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1622 ;;      Params:         2       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0
  1624 ;;      Temps:          2       0       0       0       0
  1625 ;;      Totals:         4       0       0       0       0
  1626 ;;Total ram usage:        4 bytes
  1627 ;; Hardware stack levels used: 1
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_vfpfcnvrt
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635     027F                     _abs:	
  1636                           ;psect for function _abs
  1637                           
  1638     027F                     l1278:	
  1639                           ;incstack = 0
  1640                           ; Regs used in _abs: [wreg+status,2+status,0]
  1641                           
  1642     027F  1BF7               	btfsc	abs@a+1,7
  1643     0280  2A82               	goto	u761
  1644     0281  2A83               	goto	u760
  1645     0282                     u761:
  1646     0282  2A84               	goto	l1282
  1647     0283                     u760:
  1648     0283                     l1280:
  1649     0283  2A8F               	goto	l749
  1650     0284                     l1282:
  1651     0284  0976               	comf	abs@a,w
  1652     0285  00F8               	movwf	??_abs
  1653     0286  0977               	comf	abs@a+1,w
  1654     0287  00F9               	movwf	??_abs+1
  1655     0288  0AF8               	incf	??_abs,f
  1656     0289  1903               	skipnz
  1657     028A  0AF9               	incf	??_abs+1,f
  1658     028B  0878               	movf	??_abs,w
  1659     028C  00F6               	movwf	?_abs
  1660     028D  0879               	movf	??_abs+1,w
  1661     028E  00F7               	movwf	?_abs+1
  1662     028F                     l749:
  1663     028F  0008               	return
  1664     0290                     __end_of_abs:
  1665                           
  1666                           	psect	text7
  1667     043D                     __ptext7:	
  1668 ;; *************** function ___awmod *****************
  1669 ;; Defined at:
  1670 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  divisor         2    0[COMMON] int 
  1673 ;;  dividend        2    2[COMMON] int 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  sign            1    5[COMMON] unsigned char 
  1676 ;;  counter         1    4[COMMON] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2    0[COMMON] int 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, btemp+1
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1686 ;;      Params:         4       0       0       0       0
  1687 ;;      Locals:         2       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0
  1689 ;;      Totals:         6       0       0       0       0
  1690 ;;Total ram usage:        6 bytes
  1691 ;; Hardware stack levels used: 1
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_vfpfcnvrt
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699     043D                     ___awmod:	
  1700                           ;psect for function ___awmod
  1701                           
  1702     043D                     l1226:	
  1703                           ;incstack = 0
  1704                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  1705                           
  1706     043D  01F5               	clrf	___awmod@sign
  1707     043E                     l1228:
  1708     043E  1FF3               	btfss	___awmod@dividend+1,7
  1709     043F  2C41               	goto	u631
  1710     0440  2C42               	goto	u630
  1711     0441                     u631:
  1712     0441  2C49               	goto	l1234
  1713     0442                     u630:
  1714     0442                     l1230:
  1715     0442  09F2               	comf	___awmod@dividend,f
  1716     0443  09F3               	comf	___awmod@dividend+1,f
  1717     0444  0AF2               	incf	___awmod@dividend,f
  1718     0445  1903               	skipnz
  1719     0446  0AF3               	incf	___awmod@dividend+1,f
  1720     0447                     l1232:
  1721     0447  01F5               	clrf	___awmod@sign
  1722     0448  0AF5               	incf	___awmod@sign,f
  1723     0449                     l1234:
  1724     0449  1FF1               	btfss	___awmod@divisor+1,7
  1725     044A  2C4C               	goto	u641
  1726     044B  2C4D               	goto	u640
  1727     044C                     u641:
  1728     044C  2C52               	goto	l1238
  1729     044D                     u640:
  1730     044D                     l1236:
  1731     044D  09F0               	comf	___awmod@divisor,f
  1732     044E  09F1               	comf	___awmod@divisor+1,f
  1733     044F  0AF0               	incf	___awmod@divisor,f
  1734     0450  1903               	skipnz
  1735     0451  0AF1               	incf	___awmod@divisor+1,f
  1736     0452                     l1238:
  1737     0452  0870               	movf	___awmod@divisor,w
  1738     0453  0471               	iorwf	___awmod@divisor+1,w
  1739     0454  1903               	btfsc	3,2
  1740     0455  2C57               	goto	u651
  1741     0456  2C58               	goto	u650
  1742     0457                     u651:
  1743     0457  2C87               	goto	l1256
  1744     0458                     u650:
  1745     0458                     l1240:
  1746     0458  01F4               	clrf	___awmod@counter
  1747     0459  0AF4               	incf	___awmod@counter,f
  1748     045A  2C66               	goto	l1246
  1749     045B                     l1242:
  1750     045B  3001               	movlw	1
  1751     045C                     u665:
  1752     045C  1003               	clrc
  1753     045D  0DF0               	rlf	___awmod@divisor,f
  1754     045E  0DF1               	rlf	___awmod@divisor+1,f
  1755     045F  3EFF               	addlw	-1
  1756     0460  1D03               	skipz
  1757     0461  2C5C               	goto	u665
  1758     0462                     l1244:
  1759     0462  3001               	movlw	1
  1760     0463  00FF               	movwf	btemp+1
  1761     0464  087F               	movf	btemp+1,w
  1762     0465  07F4               	addwf	___awmod@counter,f
  1763     0466                     l1246:
  1764     0466  1FF1               	btfss	___awmod@divisor+1,7
  1765     0467  2C69               	goto	u671
  1766     0468  2C6A               	goto	u670
  1767     0469                     u671:
  1768     0469  2C5B               	goto	l1242
  1769     046A                     u670:
  1770     046A                     l1248:
  1771     046A  0871               	movf	___awmod@divisor+1,w
  1772     046B  0273               	subwf	___awmod@dividend+1,w
  1773     046C  1D03               	skipz
  1774     046D  2C70               	goto	u685
  1775     046E  0870               	movf	___awmod@divisor,w
  1776     046F  0272               	subwf	___awmod@dividend,w
  1777     0470                     u685:
  1778     0470  1C03               	skipc
  1779     0471  2C73               	goto	u681
  1780     0472  2C74               	goto	u680
  1781     0473                     u681:
  1782     0473  2C7A               	goto	l1252
  1783     0474                     u680:
  1784     0474                     l1250:
  1785     0474  0870               	movf	___awmod@divisor,w
  1786     0475  02F2               	subwf	___awmod@dividend,f
  1787     0476  0871               	movf	___awmod@divisor+1,w
  1788     0477  1C03               	skipc
  1789     0478  03F3               	decf	___awmod@dividend+1,f
  1790     0479  02F3               	subwf	___awmod@dividend+1,f
  1791     047A                     l1252:
  1792     047A  3001               	movlw	1
  1793     047B                     u695:
  1794     047B  1003               	clrc
  1795     047C  0CF1               	rrf	___awmod@divisor+1,f
  1796     047D  0CF0               	rrf	___awmod@divisor,f
  1797     047E  3EFF               	addlw	-1
  1798     047F  1D03               	skipz
  1799     0480  2C7B               	goto	u695
  1800     0481                     l1254:
  1801     0481  3001               	movlw	1
  1802     0482  02F4               	subwf	___awmod@counter,f
  1803     0483  1D03               	btfss	3,2
  1804     0484  2C86               	goto	u701
  1805     0485  2C87               	goto	u700
  1806     0486                     u701:
  1807     0486  2C6A               	goto	l1248
  1808     0487                     u700:
  1809     0487                     l1256:
  1810     0487  0875               	movf	___awmod@sign,w
  1811     0488  1903               	btfsc	3,2
  1812     0489  2C8B               	goto	u711
  1813     048A  2C8C               	goto	u710
  1814     048B                     u711:
  1815     048B  2C91               	goto	l1260
  1816     048C                     u710:
  1817     048C                     l1258:
  1818     048C  09F2               	comf	___awmod@dividend,f
  1819     048D  09F3               	comf	___awmod@dividend+1,f
  1820     048E  0AF2               	incf	___awmod@dividend,f
  1821     048F  1903               	skipnz
  1822     0490  0AF3               	incf	___awmod@dividend+1,f
  1823     0491                     l1260:
  1824     0491  0873               	movf	___awmod@dividend+1,w
  1825     0492  00F1               	movwf	?___awmod+1
  1826     0493  0872               	movf	___awmod@dividend,w
  1827     0494  00F0               	movwf	?___awmod
  1828     0495                     l401:
  1829     0495  0008               	return
  1830     0496                     __end_of___awmod:
  1831                           
  1832                           	psect	text8
  1833     04F4                     __ptext8:	
  1834 ;; *************** function ___awdiv *****************
  1835 ;; Defined at:
  1836 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  divisor         2    0[COMMON] int 
  1839 ;;  dividend        2    2[COMMON] int 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  quotient        2    6[COMMON] int 
  1842 ;;  sign            1    5[COMMON] unsigned char 
  1843 ;;  counter         1    4[COMMON] unsigned char 
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  2    0[COMMON] int 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0, btemp+1
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1853 ;;      Params:         4       0       0       0       0
  1854 ;;      Locals:         4       0       0       0       0
  1855 ;;      Temps:          0       0       0       0       0
  1856 ;;      Totals:         8       0       0       0       0
  1857 ;;Total ram usage:        8 bytes
  1858 ;; Hardware stack levels used: 1
  1859 ;; This function calls:
  1860 ;;		Nothing
  1861 ;; This function is called by:
  1862 ;;		_vfpfcnvrt
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866     04F4                     ___awdiv:	
  1867                           ;psect for function ___awdiv
  1868                           
  1869     04F4                     l1182:	
  1870                           ;incstack = 0
  1871                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1872                           
  1873     04F4  01F5               	clrf	___awdiv@sign
  1874     04F5                     l1184:
  1875     04F5  1FF1               	btfss	___awdiv@divisor+1,7
  1876     04F6  2CF8               	goto	u531
  1877     04F7  2CF9               	goto	u530
  1878     04F8                     u531:
  1879     04F8  2D00               	goto	l1190
  1880     04F9                     u530:
  1881     04F9                     l1186:
  1882     04F9  09F0               	comf	___awdiv@divisor,f
  1883     04FA  09F1               	comf	___awdiv@divisor+1,f
  1884     04FB  0AF0               	incf	___awdiv@divisor,f
  1885     04FC  1903               	skipnz
  1886     04FD  0AF1               	incf	___awdiv@divisor+1,f
  1887     04FE                     l1188:
  1888     04FE  01F5               	clrf	___awdiv@sign
  1889     04FF  0AF5               	incf	___awdiv@sign,f
  1890     0500                     l1190:
  1891     0500  1FF3               	btfss	___awdiv@dividend+1,7
  1892     0501  2D03               	goto	u541
  1893     0502  2D04               	goto	u540
  1894     0503                     u541:
  1895     0503  2D0D               	goto	l1196
  1896     0504                     u540:
  1897     0504                     l1192:
  1898     0504  09F2               	comf	___awdiv@dividend,f
  1899     0505  09F3               	comf	___awdiv@dividend+1,f
  1900     0506  0AF2               	incf	___awdiv@dividend,f
  1901     0507  1903               	skipnz
  1902     0508  0AF3               	incf	___awdiv@dividend+1,f
  1903     0509                     l1194:
  1904     0509  3001               	movlw	1
  1905     050A  00FF               	movwf	btemp+1
  1906     050B  087F               	movf	btemp+1,w
  1907     050C  06F5               	xorwf	___awdiv@sign,f
  1908     050D                     l1196:
  1909     050D  01F6               	clrf	___awdiv@quotient
  1910     050E  01F7               	clrf	___awdiv@quotient+1
  1911     050F                     l1198:
  1912     050F  0870               	movf	___awdiv@divisor,w
  1913     0510  0471               	iorwf	___awdiv@divisor+1,w
  1914     0511  1903               	btfsc	3,2
  1915     0512  2D14               	goto	u551
  1916     0513  2D15               	goto	u550
  1917     0514                     u551:
  1918     0514  2D4C               	goto	l1218
  1919     0515                     u550:
  1920     0515                     l1200:
  1921     0515  01F4               	clrf	___awdiv@counter
  1922     0516  0AF4               	incf	___awdiv@counter,f
  1923     0517  2D23               	goto	l1206
  1924     0518                     l1202:
  1925     0518  3001               	movlw	1
  1926     0519                     u565:
  1927     0519  1003               	clrc
  1928     051A  0DF0               	rlf	___awdiv@divisor,f
  1929     051B  0DF1               	rlf	___awdiv@divisor+1,f
  1930     051C  3EFF               	addlw	-1
  1931     051D  1D03               	skipz
  1932     051E  2D19               	goto	u565
  1933     051F                     l1204:
  1934     051F  3001               	movlw	1
  1935     0520  00FF               	movwf	btemp+1
  1936     0521  087F               	movf	btemp+1,w
  1937     0522  07F4               	addwf	___awdiv@counter,f
  1938     0523                     l1206:
  1939     0523  1FF1               	btfss	___awdiv@divisor+1,7
  1940     0524  2D26               	goto	u571
  1941     0525  2D27               	goto	u570
  1942     0526                     u571:
  1943     0526  2D18               	goto	l1202
  1944     0527                     u570:
  1945     0527                     l1208:
  1946     0527  3001               	movlw	1
  1947     0528                     u585:
  1948     0528  1003               	clrc
  1949     0529  0DF6               	rlf	___awdiv@quotient,f
  1950     052A  0DF7               	rlf	___awdiv@quotient+1,f
  1951     052B  3EFF               	addlw	-1
  1952     052C  1D03               	skipz
  1953     052D  2D28               	goto	u585
  1954     052E  0871               	movf	___awdiv@divisor+1,w
  1955     052F  0273               	subwf	___awdiv@dividend+1,w
  1956     0530  1D03               	skipz
  1957     0531  2D34               	goto	u595
  1958     0532  0870               	movf	___awdiv@divisor,w
  1959     0533  0272               	subwf	___awdiv@dividend,w
  1960     0534                     u595:
  1961     0534  1C03               	skipc
  1962     0535  2D37               	goto	u591
  1963     0536  2D38               	goto	u590
  1964     0537                     u591:
  1965     0537  2D3F               	goto	l1214
  1966     0538                     u590:
  1967     0538                     l1210:
  1968     0538  0870               	movf	___awdiv@divisor,w
  1969     0539  02F2               	subwf	___awdiv@dividend,f
  1970     053A  0871               	movf	___awdiv@divisor+1,w
  1971     053B  1C03               	skipc
  1972     053C  03F3               	decf	___awdiv@dividend+1,f
  1973     053D  02F3               	subwf	___awdiv@dividend+1,f
  1974     053E                     l1212:
  1975     053E  1476               	bsf	___awdiv@quotient,0
  1976     053F                     l1214:
  1977     053F  3001               	movlw	1
  1978     0540                     u605:
  1979     0540  1003               	clrc
  1980     0541  0CF1               	rrf	___awdiv@divisor+1,f
  1981     0542  0CF0               	rrf	___awdiv@divisor,f
  1982     0543  3EFF               	addlw	-1
  1983     0544  1D03               	skipz
  1984     0545  2D40               	goto	u605
  1985     0546                     l1216:
  1986     0546  3001               	movlw	1
  1987     0547  02F4               	subwf	___awdiv@counter,f
  1988     0548  1D03               	btfss	3,2
  1989     0549  2D4B               	goto	u611
  1990     054A  2D4C               	goto	u610
  1991     054B                     u611:
  1992     054B  2D27               	goto	l1208
  1993     054C                     u610:
  1994     054C                     l1218:
  1995     054C  0875               	movf	___awdiv@sign,w
  1996     054D  1903               	btfsc	3,2
  1997     054E  2D50               	goto	u621
  1998     054F  2D51               	goto	u620
  1999     0550                     u621:
  2000     0550  2D56               	goto	l1222
  2001     0551                     u620:
  2002     0551                     l1220:
  2003     0551  09F6               	comf	___awdiv@quotient,f
  2004     0552  09F7               	comf	___awdiv@quotient+1,f
  2005     0553  0AF6               	incf	___awdiv@quotient,f
  2006     0554  1903               	skipnz
  2007     0555  0AF7               	incf	___awdiv@quotient+1,f
  2008     0556                     l1222:
  2009     0556  0877               	movf	___awdiv@quotient+1,w
  2010     0557  00F1               	movwf	?___awdiv+1
  2011     0558  0876               	movf	___awdiv@quotient,w
  2012     0559  00F0               	movwf	?___awdiv
  2013     055A                     l388:
  2014     055A  0008               	return
  2015     055B                     __end_of___awdiv:
  2016                           
  2017                           	psect	text9
  2018     02C0                     __ptext9:	
  2019 ;; *************** function _UART_int *****************
  2020 ;; Defined at:
  2021 ;;		line 197 in file "picUART.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2035 ;;      Params:         0       0       0       0       0
  2036 ;;      Locals:         0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0
  2038 ;;      Totals:         0       0       0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used: 1
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048     02C0                     _UART_int:	
  2049                           ;psect for function _UART_int
  2050                           
  2051     02C0                     l1482:	
  2052                           ;incstack = 0
  2053                           ; Regs used in _UART_int: [wreg]
  2054                           
  2055                           
  2056                           ;picUART.c: 199:     TRISCbits.TRISC6 = 0;
  2057     02C0  1683               	bsf	3,5	;RP0=1, select bank1
  2058     02C1  1303               	bcf	3,6	;RP1=0, select bank1
  2059     02C2  1307               	bcf	7,6	;volatile
  2060                           
  2061                           ;picUART.c: 200:     TRISCbits.TRISC7 = 1;
  2062     02C3  1787               	bsf	7,7	;volatile
  2063                           
  2064                           ;picUART.c: 202:     TXSTAbits.CSRC=0;
  2065     02C4  1398               	bcf	24,7	;volatile
  2066                           
  2067                           ;picUART.c: 203:     TXSTAbits.TX9=0;
  2068     02C5  1318               	bcf	24,6	;volatile
  2069                           
  2070                           ;picUART.c: 204:     TXSTAbits.TXEN=1;
  2071     02C6  1698               	bsf	24,5	;volatile
  2072                           
  2073                           ;picUART.c: 205:     TXSTAbits.SYNC=0;
  2074     02C7  1218               	bcf	24,4	;volatile
  2075                           
  2076                           ;picUART.c: 206:     TXSTAbits.BRGH=1;
  2077     02C8  1518               	bsf	24,2	;volatile
  2078                           
  2079                           ;picUART.c: 207:     TXSTAbits.TRMT=0;
  2080     02C9  1098               	bcf	24,1	;volatile
  2081                           
  2082                           ;picUART.c: 208:     TXSTAbits.TX9D=0;
  2083     02CA  1018               	bcf	24,0	;volatile
  2084                           
  2085                           ;picUART.c: 210:     RCSTAbits.SPEN=1;
  2086     02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2087     02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2088     02CD  1798               	bsf	24,7	;volatile
  2089                           
  2090                           ;picUART.c: 211:     RCSTAbits.RX9=0;
  2091     02CE  1318               	bcf	24,6	;volatile
  2092                           
  2093                           ;picUART.c: 212:     RCSTAbits.SREN=0;
  2094     02CF  1298               	bcf	24,5	;volatile
  2095                           
  2096                           ;picUART.c: 213:     RCSTAbits.CREN=1;
  2097     02D0  1618               	bsf	24,4	;volatile
  2098                           
  2099                           ;picUART.c: 214:     RCSTAbits.ADDEN=0;
  2100     02D1  1198               	bcf	24,3	;volatile
  2101                           
  2102                           ;picUART.c: 215:     RCSTAbits.FERR=0;
  2103     02D2  1118               	bcf	24,2	;volatile
  2104                           
  2105                           ;picUART.c: 216:     RCSTAbits.OERR=0;
  2106     02D3  1098               	bcf	24,1	;volatile
  2107                           
  2108                           ;picUART.c: 217:     RCSTAbits.RX9D=0;
  2109     02D4  1018               	bcf	24,0	;volatile
  2110     02D5                     l1484:
  2111                           
  2112                           ;picUART.c: 219:     SPBRG = 129;
  2113     02D5  3081               	movlw	129
  2114     02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2115     02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2116     02D8  0099               	movwf	25	;volatile
  2117     02D9                     l129:
  2118     02D9  0008               	return
  2119     02DA                     __end_of_UART_int:
  2120                           
  2121                           	psect	text10
  2122     0266                     __ptext10:	
  2123 ;; *************** function _UART_Write *****************
  2124 ;; Defined at:
  2125 ;;		line 222 in file "picUART.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  data            1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  data            1    0[COMMON] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2139 ;;      Params:         0       0       0       0       0
  2140 ;;      Locals:         1       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0
  2142 ;;      Totals:         1       0       0       0       0
  2143 ;;Total ram usage:        1 bytes
  2144 ;; Hardware stack levels used: 1
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;;		_UART_Write_Text
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153     0266                     _UART_Write:	
  2154                           ;psect for function _UART_Write
  2155                           
  2156                           
  2157                           ;incstack = 0
  2158                           ; Regs used in _UART_Write: [wreg]
  2159                           ;UART_Write@data stored from wreg
  2160     0266  00F0               	movwf	UART_Write@data
  2161     0267                     l1486:
  2162     0267                     l132:	
  2163                           ;picUART.c: 223:     while (!TXSTAbits.TRMT);
  2164                           
  2165     0267  1683               	bsf	3,5	;RP0=1, select bank1
  2166     0268  1303               	bcf	3,6	;RP1=0, select bank1
  2167     0269  1C98               	btfss	24,1	;volatile
  2168     026A  2A6C               	goto	u1031
  2169     026B  2A6D               	goto	u1030
  2170     026C                     u1031:
  2171     026C  2A67               	goto	l132
  2172     026D                     u1030:
  2173     026D                     l1488:
  2174                           
  2175                           ;picUART.c: 224:     TXREG = data;
  2176     026D  0870               	movf	UART_Write@data,w
  2177     026E  1283               	bcf	3,5	;RP0=0, select bank0
  2178     026F  1303               	bcf	3,6	;RP1=0, select bank0
  2179     0270  0099               	movwf	25	;volatile
  2180     0271                     l135:
  2181     0271  0008               	return
  2182     0272                     __end_of_UART_Write:
  2183                           
  2184                           	psect	text11
  2185     02F9                     __ptext11:	
  2186 ;; *************** function _Lcd_Write_String *****************
  2187 ;; Defined at:
  2188 ;;		line 121 in file "picUART.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  a               1    wreg     PTR unsigned char 
  2191 ;;		 -> s3(20), s2(20), s1(20), s(20), 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  a               1    8[COMMON] PTR unsigned char 
  2194 ;;		 -> s3(20), s2(20), s1(20), s(20), 
  2195 ;;  i               2    6[COMMON] int 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2205 ;;      Params:         0       0       0       0       0
  2206 ;;      Locals:         3       0       0       0       0
  2207 ;;      Temps:          1       0       0       0       0
  2208 ;;      Totals:         4       0       0       0       0
  2209 ;;Total ram usage:        4 bytes
  2210 ;; Hardware stack levels used: 1
  2211 ;; Hardware stack levels required when called: 2
  2212 ;; This function calls:
  2213 ;;		_Lcd_Write_Char
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219     02F9                     _Lcd_Write_String:	
  2220                           ;psect for function _Lcd_Write_String
  2221                           
  2222                           
  2223                           ;incstack = 0
  2224                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2225                           ;Lcd_Write_String@a stored from wreg
  2226     02F9  00F8               	movwf	Lcd_Write_String@a
  2227     02FA                     l1440:
  2228                           
  2229                           ;picUART.c: 122:  int i;;picUART.c: 123:  for(i=0;a[i]!='\0';i++)
  2230     02FA  01F6               	clrf	Lcd_Write_String@i
  2231     02FB  01F7               	clrf	Lcd_Write_String@i+1
  2232     02FC  2B0E               	goto	l1446
  2233     02FD                     l1442:
  2234                           
  2235                           ;picUART.c: 124:     Lcd_Write_Char(a[i]);
  2236     02FD  0876               	movf	Lcd_Write_String@i,w
  2237     02FE  0778               	addwf	Lcd_Write_String@a,w
  2238     02FF  00F5               	movwf	??_Lcd_Write_String
  2239     0300  0875               	movf	??_Lcd_Write_String,w
  2240     0301  0084               	movwf	4
  2241     0302  0800               	movf	0,w
  2242     0303  120A  118A  235D  120A  118A  	fcall	_Lcd_Write_Char
  2243     0308                     l1444:
  2244     0308  3001               	movlw	1
  2245     0309  07F6               	addwf	Lcd_Write_String@i,f
  2246     030A  1803               	skipnc
  2247     030B  0AF7               	incf	Lcd_Write_String@i+1,f
  2248     030C  3000               	movlw	0
  2249     030D  07F7               	addwf	Lcd_Write_String@i+1,f
  2250     030E                     l1446:
  2251     030E  0876               	movf	Lcd_Write_String@i,w
  2252     030F  0778               	addwf	Lcd_Write_String@a,w
  2253     0310  00F5               	movwf	??_Lcd_Write_String
  2254     0311  0875               	movf	??_Lcd_Write_String,w
  2255     0312  0084               	movwf	4
  2256     0313  1383               	bcf	3,7	;select IRP bank0
  2257     0314  0800               	movf	0,w
  2258     0315  1D03               	btfss	3,2
  2259     0316  2B18               	goto	u1011
  2260     0317  2B19               	goto	u1010
  2261     0318                     u1011:
  2262     0318  2AFD               	goto	l1442
  2263     0319                     u1010:
  2264     0319                     l99:
  2265     0319  0008               	return
  2266     031A                     __end_of_Lcd_Write_String:
  2267                           
  2268                           	psect	text12
  2269     035D                     __ptext12:	
  2270 ;; *************** function _Lcd_Write_Char *****************
  2271 ;; Defined at:
  2272 ;;		line 106 in file "picUART.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  a               1    wreg     unsigned char 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  a               1    4[COMMON] unsigned char 
  2277 ;;  y               1    3[COMMON] unsigned char 
  2278 ;;  temp            1    2[COMMON] unsigned char 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, pclath, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2288 ;;      Params:         0       0       0       0       0
  2289 ;;      Locals:         3       0       0       0       0
  2290 ;;      Temps:          1       0       0       0       0
  2291 ;;      Totals:         4       0       0       0       0
  2292 ;;Total ram usage:        4 bytes
  2293 ;; Hardware stack levels used: 1
  2294 ;; Hardware stack levels required when called: 1
  2295 ;; This function calls:
  2296 ;;		_Lcd_Port
  2297 ;; This function is called by:
  2298 ;;		_Lcd_Write_String
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302     035D                     _Lcd_Write_Char:	
  2303                           ;psect for function _Lcd_Write_Char
  2304                           
  2305                           
  2306                           ;incstack = 0
  2307                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2308                           ;Lcd_Write_Char@a stored from wreg
  2309     035D  00F4               	movwf	Lcd_Write_Char@a
  2310     035E                     l1358:
  2311                           
  2312                           ;picUART.c: 107:    char temp,y;;picUART.c: 108:    temp = a&0x0F;
  2313     035E  0874               	movf	Lcd_Write_Char@a,w
  2314     035F  390F               	andlw	15
  2315     0360  00F2               	movwf	Lcd_Write_Char@temp
  2316                           
  2317                           ;picUART.c: 109:    y = a&0xF0;
  2318     0361  0874               	movf	Lcd_Write_Char@a,w
  2319     0362  39F0               	andlw	240
  2320     0363  00F3               	movwf	Lcd_Write_Char@y
  2321     0364                     l1360:
  2322                           
  2323                           ;picUART.c: 110:    RB0 = 1;
  2324     0364  1283               	bcf	3,5	;RP0=0, select bank0
  2325     0365  1303               	bcf	3,6	;RP1=0, select bank0
  2326     0366  1406               	bsf	6,0	;volatile
  2327     0367                     l1362:
  2328                           
  2329                           ;picUART.c: 111:    Lcd_Port(y>>4);
  2330     0367  0873               	movf	Lcd_Write_Char@y,w
  2331     0368  00F1               	movwf	??_Lcd_Write_Char
  2332     0369  3004               	movlw	4
  2333     036A                     u915:
  2334     036A  1003               	clrc
  2335     036B  0CF1               	rrf	??_Lcd_Write_Char,f
  2336     036C  3EFF               	addlw	-1
  2337     036D  1D03               	skipz
  2338     036E  2B6A               	goto	u915
  2339     036F  0871               	movf	??_Lcd_Write_Char,w
  2340     0370  120A  118A  233B  120A  118A  	fcall	_Lcd_Port
  2341     0375                     l1364:
  2342                           
  2343                           ;picUART.c: 112:    RB1 = 1;
  2344     0375  1283               	bcf	3,5	;RP0=0, select bank0
  2345     0376  1303               	bcf	3,6	;RP1=0, select bank0
  2346     0377  1486               	bsf	6,1	;volatile
  2347     0378                     l1366:
  2348                           
  2349                           ;picUART.c: 113:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2350     0378  3042               	movlw	66
  2351     0379  00F1               	movwf	??_Lcd_Write_Char
  2352     037A                     u1067:
  2353     037A  0BF1               	decfsz	??_Lcd_Write_Char,f
  2354     037B  2B7A               	goto	u1067
  2355     037C  0000               	nop
  2356     037D                     l1368:
  2357                           
  2358                           ;picUART.c: 114:    RB1 = 0;
  2359     037D  1283               	bcf	3,5	;RP0=0, select bank0
  2360     037E  1303               	bcf	3,6	;RP1=0, select bank0
  2361     037F  1086               	bcf	6,1	;volatile
  2362     0380                     l1370:
  2363                           
  2364                           ;picUART.c: 115:    Lcd_Port(temp);
  2365     0380  0872               	movf	Lcd_Write_Char@temp,w
  2366     0381  120A  118A  233B  120A  118A  	fcall	_Lcd_Port
  2367     0386                     l1372:
  2368                           
  2369                           ;picUART.c: 116:    RB1 = 1;
  2370     0386  1283               	bcf	3,5	;RP0=0, select bank0
  2371     0387  1303               	bcf	3,6	;RP1=0, select bank0
  2372     0388  1486               	bsf	6,1	;volatile
  2373     0389                     l1374:
  2374                           
  2375                           ;picUART.c: 117:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2376     0389  3042               	movlw	66
  2377     038A  00F1               	movwf	??_Lcd_Write_Char
  2378     038B                     u1077:
  2379     038B  0BF1               	decfsz	??_Lcd_Write_Char,f
  2380     038C  2B8B               	goto	u1077
  2381     038D  0000               	nop
  2382     038E                     l1376:
  2383                           
  2384                           ;picUART.c: 118:    RB1 = 0;
  2385     038E  1283               	bcf	3,5	;RP0=0, select bank0
  2386     038F  1303               	bcf	3,6	;RP1=0, select bank0
  2387     0390  1086               	bcf	6,1	;volatile
  2388     0391                     l93:
  2389     0391  0008               	return
  2390     0392                     __end_of_Lcd_Write_Char:
  2391                           
  2392                           	psect	text13
  2393     055B                     __ptext13:	
  2394 ;; *************** function _Lcd_Set_Cursor *****************
  2395 ;; Defined at:
  2396 ;;		line 54 in file "picUART.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  a               1    wreg     unsigned char 
  2399 ;;  b               1    4[COMMON] unsigned char 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  a               1    6[COMMON] unsigned char 
  2402 ;;  temp            1    9[COMMON] unsigned char 
  2403 ;;  y               1    8[COMMON] unsigned char 
  2404 ;;  z               1    7[COMMON] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         1       0       0       0       0
  2415 ;;      Locals:         4       0       0       0       0
  2416 ;;      Temps:          1       0       0       0       0
  2417 ;;      Totals:         6       0       0       0       0
  2418 ;;Total ram usage:        6 bytes
  2419 ;; Hardware stack levels used: 1
  2420 ;; Hardware stack levels required when called: 2
  2421 ;; This function calls:
  2422 ;;		_Lcd_Cmd
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428     055B                     _Lcd_Set_Cursor:	
  2429                           ;psect for function _Lcd_Set_Cursor
  2430                           
  2431                           
  2432                           ;incstack = 0
  2433                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2434                           ;Lcd_Set_Cursor@a stored from wreg
  2435     055B  00F6               	movwf	Lcd_Set_Cursor@a
  2436     055C                     l1390:
  2437                           
  2438                           ;picUART.c: 55:  char temp,z,y;;picUART.c: 56:  if(a == 1){
  2439     055C  0376               	decf	Lcd_Set_Cursor@a,w
  2440     055D  1D03               	btfss	3,2
  2441     055E  2D60               	goto	u931
  2442     055F  2D61               	goto	u930
  2443     0560                     u931:
  2444     0560  2D7E               	goto	l1400
  2445     0561                     u930:
  2446     0561                     l1392:
  2447                           
  2448                           ;picUART.c: 57:    temp = 0x80 + b - 1;
  2449     0561  0874               	movf	Lcd_Set_Cursor@b,w
  2450     0562  3E7F               	addlw	127
  2451     0563  00F9               	movwf	Lcd_Set_Cursor@temp
  2452                           
  2453                           ;picUART.c: 58:   z = temp>>4;
  2454     0564  0879               	movf	Lcd_Set_Cursor@temp,w
  2455     0565  00F5               	movwf	??_Lcd_Set_Cursor
  2456     0566  3004               	movlw	4
  2457     0567                     u945:
  2458     0567  1003               	clrc
  2459     0568  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2460     0569  3EFF               	addlw	-1
  2461     056A  1D03               	skipz
  2462     056B  2D67               	goto	u945
  2463     056C  0875               	movf	??_Lcd_Set_Cursor,w
  2464     056D  00F7               	movwf	Lcd_Set_Cursor@z
  2465     056E                     l1394:
  2466                           
  2467                           ;picUART.c: 59:   y = temp & 0x0F;
  2468     056E  0879               	movf	Lcd_Set_Cursor@temp,w
  2469     056F  390F               	andlw	15
  2470     0570  00F8               	movwf	Lcd_Set_Cursor@y
  2471     0571                     l1396:
  2472                           
  2473                           ;picUART.c: 60:   Lcd_Cmd(z);
  2474     0571  0877               	movf	Lcd_Set_Cursor@z,w
  2475     0572  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2476     0577                     l1398:
  2477                           
  2478                           ;picUART.c: 61:   Lcd_Cmd(y);
  2479     0577  0878               	movf	Lcd_Set_Cursor@y,w
  2480     0578  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2481                           
  2482                           ;picUART.c: 62:  }
  2483     057D  2DE7               	goto	l87
  2484     057E                     l1400:
  2485     057E  3002               	movlw	2
  2486     057F  0676               	xorwf	Lcd_Set_Cursor@a,w
  2487     0580  1D03               	btfss	3,2
  2488     0581  2D83               	goto	u951
  2489     0582  2D84               	goto	u950
  2490     0583                     u951:
  2491     0583  2DA1               	goto	l1410
  2492     0584                     u950:
  2493     0584                     l1402:
  2494                           
  2495                           ;picUART.c: 64:   temp = 0xC0 + b - 1;
  2496     0584  0874               	movf	Lcd_Set_Cursor@b,w
  2497     0585  3EBF               	addlw	191
  2498     0586  00F9               	movwf	Lcd_Set_Cursor@temp
  2499                           
  2500                           ;picUART.c: 65:   z = temp>>4;
  2501     0587  0879               	movf	Lcd_Set_Cursor@temp,w
  2502     0588  00F5               	movwf	??_Lcd_Set_Cursor
  2503     0589  3004               	movlw	4
  2504     058A                     u965:
  2505     058A  1003               	clrc
  2506     058B  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2507     058C  3EFF               	addlw	-1
  2508     058D  1D03               	skipz
  2509     058E  2D8A               	goto	u965
  2510     058F  0875               	movf	??_Lcd_Set_Cursor,w
  2511     0590  00F7               	movwf	Lcd_Set_Cursor@z
  2512     0591                     l1404:
  2513                           
  2514                           ;picUART.c: 66:   y = temp & 0x0F;
  2515     0591  0879               	movf	Lcd_Set_Cursor@temp,w
  2516     0592  390F               	andlw	15
  2517     0593  00F8               	movwf	Lcd_Set_Cursor@y
  2518     0594                     l1406:
  2519                           
  2520                           ;picUART.c: 67:   Lcd_Cmd(z);
  2521     0594  0877               	movf	Lcd_Set_Cursor@z,w
  2522     0595  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2523     059A                     l1408:
  2524                           
  2525                           ;picUART.c: 68:   Lcd_Cmd(y);
  2526     059A  0878               	movf	Lcd_Set_Cursor@y,w
  2527     059B  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2528                           
  2529                           ;picUART.c: 69:  }
  2530     05A0  2DE7               	goto	l87
  2531     05A1                     l1410:
  2532     05A1  3003               	movlw	3
  2533     05A2  0676               	xorwf	Lcd_Set_Cursor@a,w
  2534     05A3  1D03               	btfss	3,2
  2535     05A4  2DA6               	goto	u971
  2536     05A5  2DA7               	goto	u970
  2537     05A6                     u971:
  2538     05A6  2DC4               	goto	l1420
  2539     05A7                     u970:
  2540     05A7                     l1412:
  2541                           
  2542                           ;picUART.c: 72:         temp = 0x90 + b - 1;
  2543     05A7  0874               	movf	Lcd_Set_Cursor@b,w
  2544     05A8  3E8F               	addlw	143
  2545     05A9  00F9               	movwf	Lcd_Set_Cursor@temp
  2546                           
  2547                           ;picUART.c: 73:         z = temp >> 4;
  2548     05AA  0879               	movf	Lcd_Set_Cursor@temp,w
  2549     05AB  00F5               	movwf	??_Lcd_Set_Cursor
  2550     05AC  3004               	movlw	4
  2551     05AD                     u985:
  2552     05AD  1003               	clrc
  2553     05AE  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2554     05AF  3EFF               	addlw	-1
  2555     05B0  1D03               	skipz
  2556     05B1  2DAD               	goto	u985
  2557     05B2  0875               	movf	??_Lcd_Set_Cursor,w
  2558     05B3  00F7               	movwf	Lcd_Set_Cursor@z
  2559     05B4                     l1414:
  2560                           
  2561                           ;picUART.c: 74:         y = temp & 0x0F;
  2562     05B4  0879               	movf	Lcd_Set_Cursor@temp,w
  2563     05B5  390F               	andlw	15
  2564     05B6  00F8               	movwf	Lcd_Set_Cursor@y
  2565     05B7                     l1416:
  2566                           
  2567                           ;picUART.c: 75:         Lcd_Cmd(z);
  2568     05B7  0877               	movf	Lcd_Set_Cursor@z,w
  2569     05B8  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2570     05BD                     l1418:
  2571                           
  2572                           ;picUART.c: 76:         Lcd_Cmd(y);
  2573     05BD  0878               	movf	Lcd_Set_Cursor@y,w
  2574     05BE  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2575                           
  2576                           ;picUART.c: 77:     }
  2577     05C3  2DE7               	goto	l87
  2578     05C4                     l1420:
  2579     05C4  3004               	movlw	4
  2580     05C5  0676               	xorwf	Lcd_Set_Cursor@a,w
  2581     05C6  1D03               	btfss	3,2
  2582     05C7  2DC9               	goto	u991
  2583     05C8  2DCA               	goto	u990
  2584     05C9                     u991:
  2585     05C9  2DE7               	goto	l83
  2586     05CA                     u990:
  2587     05CA                     l1422:
  2588                           
  2589                           ;picUART.c: 80:         temp = 0xD0 + b - 1;
  2590     05CA  0874               	movf	Lcd_Set_Cursor@b,w
  2591     05CB  3ECF               	addlw	207
  2592     05CC  00F9               	movwf	Lcd_Set_Cursor@temp
  2593                           
  2594                           ;picUART.c: 81:         z = temp >> 4;
  2595     05CD  0879               	movf	Lcd_Set_Cursor@temp,w
  2596     05CE  00F5               	movwf	??_Lcd_Set_Cursor
  2597     05CF  3004               	movlw	4
  2598     05D0                     u1005:
  2599     05D0  1003               	clrc
  2600     05D1  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2601     05D2  3EFF               	addlw	-1
  2602     05D3  1D03               	skipz
  2603     05D4  2DD0               	goto	u1005
  2604     05D5  0875               	movf	??_Lcd_Set_Cursor,w
  2605     05D6  00F7               	movwf	Lcd_Set_Cursor@z
  2606     05D7                     l1424:
  2607                           
  2608                           ;picUART.c: 82:         y = temp & 0x0F;
  2609     05D7  0879               	movf	Lcd_Set_Cursor@temp,w
  2610     05D8  390F               	andlw	15
  2611     05D9  00F8               	movwf	Lcd_Set_Cursor@y
  2612     05DA                     l1426:
  2613                           
  2614                           ;picUART.c: 83:         Lcd_Cmd(z);
  2615     05DA  0877               	movf	Lcd_Set_Cursor@z,w
  2616     05DB  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2617     05E0                     l1428:
  2618                           
  2619                           ;picUART.c: 84:         Lcd_Cmd(y);
  2620     05E0  0878               	movf	Lcd_Set_Cursor@y,w
  2621     05E1  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2622     05E6  2DE7               	goto	l87
  2623     05E7                     l83:
  2624     05E7                     l87:
  2625     05E7  0008               	return
  2626     05E8                     __end_of_Lcd_Set_Cursor:
  2627                           
  2628                           	psect	text14
  2629     0496                     __ptext14:	
  2630 ;; *************** function _Lcd_Init *****************
  2631 ;; Defined at:
  2632 ;;		line 89 in file "picUART.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0, pclath, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2646 ;;      Params:         0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0
  2648 ;;      Temps:          2       0       0       0       0
  2649 ;;      Totals:         2       0       0       0       0
  2650 ;;Total ram usage:        2 bytes
  2651 ;; Hardware stack levels used: 1
  2652 ;; Hardware stack levels required when called: 2
  2653 ;; This function calls:
  2654 ;;		_Lcd_Cmd
  2655 ;;		_Lcd_Port
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661     0496                     _Lcd_Init:	
  2662                           ;psect for function _Lcd_Init
  2663                           
  2664     0496                     l1430:	
  2665                           ;incstack = 0
  2666                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2667                           
  2668                           
  2669                           ;picUART.c: 90:     Lcd_Port(0x00);
  2670     0496  3000               	movlw	0
  2671     0497  120A  118A  233B  120A  118A  	fcall	_Lcd_Port
  2672     049C                     l1432:
  2673                           
  2674                           ;picUART.c: 91:     _delay((unsigned long)((20)*(20000000/4000.0)));
  2675     049C  3082               	movlw	130
  2676     049D  00F5               	movwf	??_Lcd_Init+1
  2677     049E  30DD               	movlw	221
  2678     049F  00F4               	movwf	??_Lcd_Init
  2679     04A0                     u1087:
  2680     04A0  0BF4               	decfsz	??_Lcd_Init,f
  2681     04A1  2CA0               	goto	u1087
  2682     04A2  0BF5               	decfsz	??_Lcd_Init+1,f
  2683     04A3  2CA0               	goto	u1087
  2684     04A4  2CA5               	nop2
  2685     04A5                     l1434:
  2686                           
  2687                           ;picUART.c: 92:     Lcd_Cmd(0x03);
  2688     04A5  3003               	movlw	3
  2689     04A6  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2690                           
  2691                           ;picUART.c: 93:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2692     04AB  3021               	movlw	33
  2693     04AC  00F5               	movwf	??_Lcd_Init+1
  2694     04AD  3076               	movlw	118
  2695     04AE  00F4               	movwf	??_Lcd_Init
  2696     04AF                     u1097:
  2697     04AF  0BF4               	decfsz	??_Lcd_Init,f
  2698     04B0  2CAF               	goto	u1097
  2699     04B1  0BF5               	decfsz	??_Lcd_Init+1,f
  2700     04B2  2CAF               	goto	u1097
  2701     04B3  0000               	nop
  2702     04B4                     l1436:
  2703                           
  2704                           ;picUART.c: 94:     Lcd_Cmd(0x03);
  2705     04B4  3003               	movlw	3
  2706     04B5  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2707     04BA                     l1438:
  2708                           
  2709                           ;picUART.c: 95:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2710     04BA  3048               	movlw	72
  2711     04BB  00F5               	movwf	??_Lcd_Init+1
  2712     04BC  306C               	movlw	108
  2713     04BD  00F4               	movwf	??_Lcd_Init
  2714     04BE                     u1107:
  2715     04BE  0BF4               	decfsz	??_Lcd_Init,f
  2716     04BF  2CBE               	goto	u1107
  2717     04C0  0BF5               	decfsz	??_Lcd_Init+1,f
  2718     04C1  2CBE               	goto	u1107
  2719     04C2  0000               	nop
  2720                           
  2721                           ;picUART.c: 96:     Lcd_Cmd(0x03);
  2722     04C3  3003               	movlw	3
  2723     04C4  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2724                           
  2725                           ;picUART.c: 97:     Lcd_Cmd(0x02);
  2726     04C9  3002               	movlw	2
  2727     04CA  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2728                           
  2729                           ;picUART.c: 98:     Lcd_Cmd(0x02);
  2730     04CF  3002               	movlw	2
  2731     04D0  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2732                           
  2733                           ;picUART.c: 99:     Lcd_Cmd(0x08);
  2734     04D5  3008               	movlw	8
  2735     04D6  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2736                           
  2737                           ;picUART.c: 100:     Lcd_Cmd(0x00);
  2738     04DB  3000               	movlw	0
  2739     04DC  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2740                           
  2741                           ;picUART.c: 101:     Lcd_Cmd(0x0C);
  2742     04E1  300C               	movlw	12
  2743     04E2  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2744                           
  2745                           ;picUART.c: 102:     Lcd_Cmd(0x00);
  2746     04E7  3000               	movlw	0
  2747     04E8  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2748                           
  2749                           ;picUART.c: 103:     Lcd_Cmd(0x06);
  2750     04ED  3006               	movlw	6
  2751     04EE  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2752     04F3                     l90:
  2753     04F3  0008               	return
  2754     04F4                     __end_of_Lcd_Init:
  2755                           
  2756                           	psect	text15
  2757     0272                     __ptext15:	
  2758 ;; *************** function _Lcd_Clear *****************
  2759 ;; Defined at:
  2760 ;;		line 49 in file "picUART.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, pclath, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2774 ;;      Params:         0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used: 1
  2780 ;; Hardware stack levels required when called: 2
  2781 ;; This function calls:
  2782 ;;		_Lcd_Cmd
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788     0272                     _Lcd_Clear:	
  2789                           ;psect for function _Lcd_Clear
  2790                           
  2791     0272                     l1388:	
  2792                           ;incstack = 0
  2793                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2794                           
  2795                           
  2796                           ;picUART.c: 50:  Lcd_Cmd(0);
  2797     0272  3000               	movlw	0
  2798     0273  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2799                           
  2800                           ;picUART.c: 51:  Lcd_Cmd(1);
  2801     0278  3001               	movlw	1
  2802     0279  120A  118A  22A6  120A  118A  	fcall	_Lcd_Cmd
  2803     027E                     l77:
  2804     027E  0008               	return
  2805     027F                     __end_of_Lcd_Clear:
  2806                           
  2807                           	psect	text16
  2808     02A6                     __ptext16:	
  2809 ;; *************** function _Lcd_Cmd *****************
  2810 ;; Defined at:
  2811 ;;		line 41 in file "picUART.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  a               1    wreg     unsigned char 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  a               1    3[COMMON] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, pclath, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2825 ;;      Params:         0       0       0       0       0
  2826 ;;      Locals:         1       0       0       0       0
  2827 ;;      Temps:          2       0       0       0       0
  2828 ;;      Totals:         3       0       0       0       0
  2829 ;;Total ram usage:        3 bytes
  2830 ;; Hardware stack levels used: 1
  2831 ;; Hardware stack levels required when called: 1
  2832 ;; This function calls:
  2833 ;;		_Lcd_Port
  2834 ;; This function is called by:
  2835 ;;		_Lcd_Clear
  2836 ;;		_Lcd_Set_Cursor
  2837 ;;		_Lcd_Init
  2838 ;;		_Lcd_Shift_Right
  2839 ;;		_Lcd_Shift_Left
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843     02A6                     _Lcd_Cmd:	
  2844                           ;psect for function _Lcd_Cmd
  2845                           
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2849                           ;Lcd_Cmd@a stored from wreg
  2850     02A6  00F3               	movwf	Lcd_Cmd@a
  2851     02A7                     l1348:
  2852                           
  2853                           ;picUART.c: 42:  RB0 = 0;
  2854     02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2855     02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2856     02A9  1006               	bcf	6,0	;volatile
  2857     02AA                     l1350:
  2858                           
  2859                           ;picUART.c: 43:  Lcd_Port(a);
  2860     02AA  0873               	movf	Lcd_Cmd@a,w
  2861     02AB  120A  118A  233B  120A  118A  	fcall	_Lcd_Port
  2862     02B0                     l1352:
  2863                           
  2864                           ;picUART.c: 44:  RB1 = 1;
  2865     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2866     02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2867     02B2  1486               	bsf	6,1	;volatile
  2868     02B3                     l1354:
  2869                           
  2870                           ;picUART.c: 45:     _delay((unsigned long)((4)*(20000000/4000.0)));
  2871     02B3  301A               	movlw	26
  2872     02B4  00F2               	movwf	??_Lcd_Cmd+1
  2873     02B5  30F8               	movlw	248
  2874     02B6  00F1               	movwf	??_Lcd_Cmd
  2875     02B7                     u1117:
  2876     02B7  0BF1               	decfsz	??_Lcd_Cmd,f
  2877     02B8  2AB7               	goto	u1117
  2878     02B9  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2879     02BA  2AB7               	goto	u1117
  2880     02BB  0000               	nop
  2881     02BC                     l1356:
  2882                           
  2883                           ;picUART.c: 46:     RB1 = 0;
  2884     02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2885     02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2886     02BE  1086               	bcf	6,1	;volatile
  2887     02BF                     l74:
  2888     02BF  0008               	return
  2889     02C0                     __end_of_Lcd_Cmd:
  2890                           
  2891                           	psect	text17
  2892     033B                     __ptext17:	
  2893 ;; *************** function _Lcd_Port *****************
  2894 ;; Defined at:
  2895 ;;		line 19 in file "picUART.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  a               1    wreg     unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  a               1    0[COMMON] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2909 ;;      Params:         0       0       0       0       0
  2910 ;;      Locals:         1       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0
  2912 ;;      Totals:         1       0       0       0       0
  2913 ;;Total ram usage:        1 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_Lcd_Cmd
  2919 ;;		_Lcd_Init
  2920 ;;		_Lcd_Write_Char
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924     033B                     _Lcd_Port:	
  2925                           ;psect for function _Lcd_Port
  2926                           
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _Lcd_Port: [wreg]
  2930                           ;Lcd_Port@a stored from wreg
  2931     033B  00F0               	movwf	Lcd_Port@a
  2932     033C                     l1286:
  2933                           
  2934                           ;picUART.c: 20:  if(a & 1)
  2935     033C  1C70               	btfss	Lcd_Port@a,0
  2936     033D  2B3F               	goto	u771
  2937     033E  2B40               	goto	u770
  2938     033F                     u771:
  2939     033F  2B44               	goto	l63
  2940     0340                     u770:
  2941     0340                     l1288:
  2942                           
  2943                           ;picUART.c: 21:   RB2 = 1;
  2944     0340  1283               	bcf	3,5	;RP0=0, select bank0
  2945     0341  1303               	bcf	3,6	;RP1=0, select bank0
  2946     0342  1506               	bsf	6,2	;volatile
  2947     0343  2B47               	goto	l64
  2948     0344                     l63:	
  2949                           ;picUART.c: 22:  else
  2950                           
  2951                           
  2952                           ;picUART.c: 23:   RB2 = 0;
  2953     0344  1283               	bcf	3,5	;RP0=0, select bank0
  2954     0345  1303               	bcf	3,6	;RP1=0, select bank0
  2955     0346  1106               	bcf	6,2	;volatile
  2956     0347                     l64:
  2957                           
  2958                           ;picUART.c: 25:  if(a & 2)
  2959     0347  1CF0               	btfss	Lcd_Port@a,1
  2960     0348  2B4A               	goto	u781
  2961     0349  2B4B               	goto	u780
  2962     034A                     u781:
  2963     034A  2B4D               	goto	l65
  2964     034B                     u780:
  2965     034B                     l1290:
  2966                           
  2967                           ;picUART.c: 26:   RB3 = 1;
  2968     034B  1586               	bsf	6,3	;volatile
  2969     034C  2B4E               	goto	l66
  2970     034D                     l65:	
  2971                           ;picUART.c: 27:  else
  2972                           
  2973                           
  2974                           ;picUART.c: 28:   RB3 = 0;
  2975     034D  1186               	bcf	6,3	;volatile
  2976     034E                     l66:
  2977                           
  2978                           ;picUART.c: 30:  if(a & 4)
  2979     034E  1D70               	btfss	Lcd_Port@a,2
  2980     034F  2B51               	goto	u791
  2981     0350  2B52               	goto	u790
  2982     0351                     u791:
  2983     0351  2B54               	goto	l67
  2984     0352                     u790:
  2985     0352                     l1292:
  2986                           
  2987                           ;picUART.c: 31:   RB4 = 1;
  2988     0352  1606               	bsf	6,4	;volatile
  2989     0353  2B55               	goto	l68
  2990     0354                     l67:	
  2991                           ;picUART.c: 32:  else
  2992                           
  2993                           
  2994                           ;picUART.c: 33:   RB4 = 0;
  2995     0354  1206               	bcf	6,4	;volatile
  2996     0355                     l68:
  2997                           
  2998                           ;picUART.c: 35:  if(a & 8)
  2999     0355  1DF0               	btfss	Lcd_Port@a,3
  3000     0356  2B58               	goto	u801
  3001     0357  2B59               	goto	u800
  3002     0358                     u801:
  3003     0358  2B5B               	goto	l69
  3004     0359                     u800:
  3005     0359                     l1294:
  3006                           
  3007                           ;picUART.c: 36:   RB5 = 1;
  3008     0359  1686               	bsf	6,5	;volatile
  3009     035A  2B5C               	goto	l71
  3010     035B                     l69:	
  3011                           ;picUART.c: 37:  else
  3012                           
  3013                           
  3014                           ;picUART.c: 38:   RB5 = 0;
  3015     035B  1286               	bcf	6,5	;volatile
  3016     035C                     l71:
  3017     035C  0008               	return
  3018     035D                     __end_of_Lcd_Port:
  3019                           
  3020                           	psect	text18
  3021     025A                     __ptext18:	
  3022 ;; *************** function _LCD *****************
  3023 ;; Defined at:
  3024 ;;		line 137 in file "picUART.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  a               2    0        unsigned int 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used: 1
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051     025A                     _LCD:	
  3052                           ;psect for function _LCD
  3053                           
  3054     025A                     l1448:	
  3055                           ;incstack = 0
  3056                           ; Regs used in _LCD: [status,2]
  3057                           
  3058                           
  3059                           ;picUART.c: 138:     unsigned int a;;picUART.c: 139:     TRISB = 0x00;
  3060     025A  1683               	bsf	3,5	;RP0=1, select bank1
  3061     025B  1303               	bcf	3,6	;RP1=0, select bank1
  3062     025C  0186               	clrf	6	;volatile
  3063     025D                     l108:
  3064     025D  0008               	return
  3065     025E                     __end_of_LCD:
  3066                           
  3067                           	psect	text19
  3068     0392                     __ptext19:	
  3069 ;; *************** function _ADCRead *****************
  3070 ;; Defined at:
  3071 ;;		line 160 in file "picUART.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  x               2    0[COMMON] int 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  2    0[COMMON] int 
  3078 ;; Registers used:
  3079 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3085 ;;      Params:         2       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0
  3087 ;;      Temps:          1       0       0       0       0
  3088 ;;      Totals:         3       0       0       0       0
  3089 ;;Total ram usage:        3 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098     0392                     _ADCRead:	
  3099                           ;psect for function _ADCRead
  3100                           
  3101     0392                     l1452:	
  3102                           ;incstack = 0
  3103                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0]
  3104                           
  3105                           
  3106                           ;picUART.c: 161:  switch (x) {
  3107     0392  2BBB               	goto	l1468
  3108     0393                     l1454:
  3109                           
  3110                           ;picUART.c: 163:   ADCON0bits.CHS = 0b0000;
  3111     0393  30C7               	movlw	-57
  3112     0394  1283               	bcf	3,5	;RP0=0, select bank0
  3113     0395  1303               	bcf	3,6	;RP1=0, select bank0
  3114     0396  059F               	andwf	31,f	;volatile
  3115                           
  3116                           ;picUART.c: 164:   break;
  3117     0397  2BD4               	goto	l1470
  3118     0398                     l1456:
  3119                           
  3120                           ;picUART.c: 167:   ADCON0bits.CHS = 0b0001;
  3121     0398  1283               	bcf	3,5	;RP0=0, select bank0
  3122     0399  1303               	bcf	3,6	;RP1=0, select bank0
  3123     039A  081F               	movf	31,w	;volatile
  3124     039B  39C7               	andlw	-57
  3125     039C  3808               	iorlw	8
  3126     039D  009F               	movwf	31	;volatile
  3127                           
  3128                           ;picUART.c: 168:   break;
  3129     039E  2BD4               	goto	l1470
  3130     039F                     l1458:
  3131                           
  3132                           ;picUART.c: 171:   ADCON0bits.CHS = 0b0010;
  3133     039F  1283               	bcf	3,5	;RP0=0, select bank0
  3134     03A0  1303               	bcf	3,6	;RP1=0, select bank0
  3135     03A1  081F               	movf	31,w	;volatile
  3136     03A2  39C7               	andlw	-57
  3137     03A3  3810               	iorlw	16
  3138     03A4  009F               	movwf	31	;volatile
  3139                           
  3140                           ;picUART.c: 172:   break;
  3141     03A5  2BD4               	goto	l1470
  3142     03A6                     l1460:
  3143                           
  3144                           ;picUART.c: 175:   ADCON0bits.CHS = 0b0011;
  3145     03A6  1283               	bcf	3,5	;RP0=0, select bank0
  3146     03A7  1303               	bcf	3,6	;RP1=0, select bank0
  3147     03A8  081F               	movf	31,w	;volatile
  3148     03A9  39C7               	andlw	-57
  3149     03AA  3818               	iorlw	24
  3150     03AB  009F               	movwf	31	;volatile
  3151                           
  3152                           ;picUART.c: 176:   break;
  3153     03AC  2BD4               	goto	l1470
  3154     03AD                     l1462:
  3155                           
  3156                           ;picUART.c: 179:   ADCON0bits.CHS = 0b0100;
  3157     03AD  1283               	bcf	3,5	;RP0=0, select bank0
  3158     03AE  1303               	bcf	3,6	;RP1=0, select bank0
  3159     03AF  081F               	movf	31,w	;volatile
  3160     03B0  39C7               	andlw	-57
  3161     03B1  3820               	iorlw	32
  3162     03B2  009F               	movwf	31	;volatile
  3163                           
  3164                           ;picUART.c: 180:   break;
  3165     03B3  2BD4               	goto	l1470
  3166     03B4                     l1464:
  3167                           
  3168                           ;picUART.c: 183:   ADCON0bits.CHS = 0b0101;
  3169     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3170     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3171     03B6  081F               	movf	31,w	;volatile
  3172     03B7  39C7               	andlw	-57
  3173     03B8  3828               	iorlw	40
  3174     03B9  009F               	movwf	31	;volatile
  3175                           
  3176                           ;picUART.c: 184:   break;
  3177     03BA  2BD4               	goto	l1470
  3178     03BB                     l1468:
  3179                           
  3180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3181                           ; Switch size 1, requested type "simple"
  3182                           ; Number of cases is 1, Range of values is 0 to 0
  3183                           ; switch strategies available:
  3184                           ; Name         Instructions Cycles
  3185                           ; simple_byte            4     3 (average)
  3186                           ; direct_byte           11     8 (fixed)
  3187                           ; jumptable            260     6 (fixed)
  3188                           ;	Chosen strategy is simple_byte
  3189     03BB  0871               	movf	ADCRead@x+1,w
  3190     03BC  3A00               	xorlw	0	; case 0
  3191     03BD  1903               	skipnz
  3192     03BE  2BC0               	goto	l1590
  3193     03BF  2BD4               	goto	l1470
  3194     03C0                     l1590:
  3195                           
  3196                           ; Switch size 1, requested type "simple"
  3197                           ; Number of cases is 6, Range of values is 0 to 5
  3198                           ; switch strategies available:
  3199                           ; Name         Instructions Cycles
  3200                           ; simple_byte           19    10 (average)
  3201                           ; direct_byte           26     8 (fixed)
  3202                           ; jumptable            260     6 (fixed)
  3203                           ;	Chosen strategy is simple_byte
  3204     03C0  0870               	movf	ADCRead@x,w
  3205     03C1  3A00               	xorlw	0	; case 0
  3206     03C2  1903               	skipnz
  3207     03C3  2B93               	goto	l1454
  3208     03C4  3A01               	xorlw	1	; case 1
  3209     03C5  1903               	skipnz
  3210     03C6  2B98               	goto	l1456
  3211     03C7  3A03               	xorlw	3	; case 2
  3212     03C8  1903               	skipnz
  3213     03C9  2B9F               	goto	l1458
  3214     03CA  3A01               	xorlw	1	; case 3
  3215     03CB  1903               	skipnz
  3216     03CC  2BA6               	goto	l1460
  3217     03CD  3A07               	xorlw	7	; case 4
  3218     03CE  1903               	skipnz
  3219     03CF  2BAD               	goto	l1462
  3220     03D0  3A01               	xorlw	1	; case 5
  3221     03D1  1903               	skipnz
  3222     03D2  2BB4               	goto	l1464
  3223     03D3  2BD4               	goto	l1470
  3224     03D4                     l1470:
  3225                           
  3226                           ;picUART.c: 189:  _delay((unsigned long)((100)*(20000000/4000000.0)));
  3227     03D4  30A6               	movlw	166
  3228     03D5  00F2               	movwf	??_ADCRead
  3229     03D6                     u1127:
  3230     03D6  0BF2               	decfsz	??_ADCRead,f
  3231     03D7  2BD6               	goto	u1127
  3232     03D8  0000               	nop
  3233     03D9                     l1472:
  3234                           
  3235                           ;picUART.c: 191:  GO_nDONE = 1;
  3236     03D9  1283               	bcf	3,5	;RP0=0, select bank0
  3237     03DA  1303               	bcf	3,6	;RP1=0, select bank0
  3238     03DB  151F               	bsf	31,2	;volatile
  3239     03DC                     l123:	
  3240                           ;picUART.c: 192:  while (ADCON0bits.GO_nDONE);
  3241                           
  3242     03DC  191F               	btfsc	31,2	;volatile
  3243     03DD  2BDF               	goto	u1021
  3244     03DE  2BE0               	goto	u1020
  3245     03DF                     u1021:
  3246     03DF  2BDC               	goto	l123
  3247     03E0                     u1020:
  3248     03E0                     l1474:
  3249                           
  3250                           ;picUART.c: 194:  return ((unsigned int)(ADRESH << 8) | ADRESL);
  3251     03E0  081E               	movf	30,w	;volatile
  3252     03E1  00F1               	movwf	?_ADCRead+1
  3253     03E2  1683               	bsf	3,5	;RP0=1, select bank1
  3254     03E3  1303               	bcf	3,6	;RP1=0, select bank1
  3255     03E4  081E               	movf	30,w	;volatile
  3256     03E5  00F0               	movwf	?_ADCRead
  3257     03E6                     l126:
  3258     03E6  0008               	return
  3259     03E7                     __end_of_ADCRead:
  3260                           
  3261                           	psect	text20
  3262     0290                     __ptext20:	
  3263 ;; *************** function _ADCInit *****************
  3264 ;; Defined at:
  3265 ;;		line 142 in file "picUART.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		None
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3279 ;;      Params:         0       0       0       0       0
  3280 ;;      Locals:         0       0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0
  3282 ;;      Totals:         0       0       0       0       0
  3283 ;;Total ram usage:        0 bytes
  3284 ;; Hardware stack levels used: 1
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_main
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292     0290                     _ADCInit:	
  3293                           ;psect for function _ADCInit
  3294                           
  3295     0290                     l1450:	
  3296                           ;incstack = 0
  3297                           ; Regs used in _ADCInit: []
  3298                           
  3299                           
  3300                           ;picUART.c: 143:  ADCON0bits.ADCS0 = 1;
  3301     0290  1283               	bcf	3,5	;RP0=0, select bank0
  3302     0291  1303               	bcf	3,6	;RP1=0, select bank0
  3303     0292  171F               	bsf	31,6	;volatile
  3304                           
  3305                           ;picUART.c: 144:  ADCON0bits.ADCS1 = 0;
  3306     0293  139F               	bcf	31,7	;volatile
  3307                           
  3308                           ;picUART.c: 145:  ADCON1bits.ADCS2 = 1;
  3309     0294  1683               	bsf	3,5	;RP0=1, select bank1
  3310     0295  1303               	bcf	3,6	;RP1=0, select bank1
  3311     0296  171F               	bsf	31,6	;volatile
  3312                           
  3313                           ;picUART.c: 147:  ADCON1bits.ADFM = 1;
  3314     0297  179F               	bsf	31,7	;volatile
  3315                           
  3316                           ;picUART.c: 148:  ADCON1bits.PCFG0 = 0;
  3317     0298  101F               	bcf	31,0	;volatile
  3318                           
  3319                           ;picUART.c: 149:  ADCON1bits.PCFG1 = 0;
  3320     0299  109F               	bcf	31,1	;volatile
  3321                           
  3322                           ;picUART.c: 150:  ADCON1bits.PCFG2 = 0;
  3323     029A  111F               	bcf	31,2	;volatile
  3324                           
  3325                           ;picUART.c: 151:  ADCON1bits.PCFG3 = 0;
  3326     029B  119F               	bcf	31,3	;volatile
  3327                           
  3328                           ;picUART.c: 153:  ADCON0bits.ADON = 1;
  3329     029C  1283               	bcf	3,5	;RP0=0, select bank0
  3330     029D  1303               	bcf	3,6	;RP1=0, select bank0
  3331     029E  141F               	bsf	31,0	;volatile
  3332                           
  3333                           ;picUART.c: 154:  ADCON0bits.GO_nDONE = 1;
  3334     029F  151F               	bsf	31,2	;volatile
  3335                           
  3336                           ;picUART.c: 155:     TRISA0 = 1;
  3337     02A0  1683               	bsf	3,5	;RP0=1, select bank1
  3338     02A1  1303               	bcf	3,6	;RP1=0, select bank1
  3339     02A2  1405               	bsf	5,0	;volatile
  3340                           
  3341                           ;picUART.c: 156:  TRISA1 = 1;
  3342     02A3  1485               	bsf	5,1	;volatile
  3343                           
  3344                           ;picUART.c: 157:  TRISA2 = 1;
  3345     02A4  1505               	bsf	5,2	;volatile
  3346     02A5                     l111:
  3347     02A5  0008               	return
  3348     02A6                     __end_of_ADCInit:
  3349     007E                     btemp	set	126	;btemp
  3350     007E                     wtemp0	set	126
  3351                           
  3352                           	psect	config
  3353                           
  3354                           ;Config register CONFIG @ 0x2007
  3355                           ;	Oscillator Selection bits
  3356                           ;	FOSC = HS, HS oscillator
  3357                           ;	Watchdog Timer Enable bit
  3358                           ;	WDTE = OFF, WDT disabled
  3359                           ;	Power-up Timer Enable bit
  3360                           ;	PWRTE = ON, PWRT enabled
  3361                           ;	Brown-out Reset Enable bit
  3362                           ;	BOREN = ON, BOR enabled
  3363                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3364                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3365                           ;	Data EEPROM Memory Code Protection bit
  3366                           ;	CPD = OFF, Data EEPROM code protection off
  3367                           ;	Flash Program Memory Write Enable bits
  3368                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3369                           ;	In-Circuit Debugger Mode bit
  3370                           ;	DEBUG = 0x1, unprogrammed default
  3371                           ;	Flash Program Memory Code Protection bit
  3372                           ;	CP = OFF, Code protection off
  3373     2007                     	org	8199
  3374     2007  3F72               	dw	16242

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      63
    BANK1            80      0      60
    BANK3            96      0      32
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 20
		 -> s(BANK0[20]), s1(BANK1[20]), s2(BANK1[20]), s3(BANK1[20]), 

    S767$buffer	PTR unsigned char  size(1) Largest target is 0

    S767$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[6]), STR_3(CODE[6]), STR_4(CODE[6]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> s(BANK0[20]), s1(BANK1[20]), s2(BANK1[20]), s3(BANK1[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[6]), STR_3(CODE[6]), STR_4(CODE[6]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[6]), STR_3(CODE[6]), STR_4(CODE[6]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[6]), STR_3(CODE[6]), STR_4(CODE[6]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5495
                                             29 BANK0      1     1      0
                            _ADCInit
                            _ADCRead
                                _LCD
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART_Write
                           _UART_int
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    3485
                                             12 BANK0     17    14      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    2850
                                              8 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    2543
                                             10 COMMON     4     2      2
                                              0 BANK0      8     8      0
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     400
                                              5 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     954
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD                                                  2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2     326
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCRead
   _LCD
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Write
   _UART_int
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      3F       5       78.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      3C       7       75.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      20       9       33.3%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A9      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Dec 21 18:01:11 2024

                       _s 002D                         pc 0002                        l71 035C  
                      l63 0344                        l64 0347                        l65 034D  
                      l66 034E                        l74 02BF                        l90 04F3  
                      l67 0354                        l83 05E7                        l68 0355  
                      l69 035B                        l77 027E                        l93 0391  
                      l87 05E7                        l99 0319              ___awdiv@sign 0075  
                      _s1 00C8                        _s2 00B4                        _s3 00A0  
                      fsr 0004                       l111 02A5                       l123 03DC  
                     l108 025D                       l132 0267                       l126 03E6  
                     l135 0271                       l129 02D9                       l401 0495  
                     l388 055A                       l742 033A                       l736 06D2  
                     l761 043C                       l772 0259                       l749 028F  
                     l698 02F8                       _LCD 025A                       _RB0 0030  
                     _RB1 0031                       _RB2 0032                       _RB3 0033  
                     _RB4 0034                       _RB5 0035                       u610 054C  
                     u530 04F9                       u611 054B                       u531 04F8  
                     u620 0551                       u540 0504                       u700 0487  
                     u621 0550                       u605 0540                       u541 0503  
                     u701 0486                       u550 0515                       u710 048C  
                     u630 0442                       u551 0514                       u711 048B  
                     u631 0441                       u800 0359                       u640 044D  
                     u720 03EC                       u801 0358                       u641 044C  
                     u721 03EB                       u570 0527                       u650 0458  
                     u730 03F1                       u810 05FA                       u571 0526  
                     u651 0457                       u731 03F0                       u811 05F9  
                     u740 0407                       u900 06B2                       u820 061B  
                     u565 0519                       u741 0406                       u901 06B1  
                     u821 061A                       u590 0538                       u670 046A  
                     u750 0425                       u830 0627                       u591 0537  
                     u671 0469                       u751 0424                       u831 0626  
                     u680 0474                       u760 0283                       u840 0640  
                     u920 0338                       u585 0528                       u681 0473  
                     u665 045C                       u761 0282                       u841 063E  
                     u921 0337                       u770 0340                       u930 0561  
                     u850 0641                       u771 033F                       u931 0560  
                     u915 036A                       u595 0534                       u755 0421  
                     u780 034B                       u860 067C                       u781 034A  
                     u685 0470                       u861 067B                       u790 0352  
                     u950 0584                       u870 0681                       u791 0351  
                     u951 0583                       u695 047B                       u871 0680  
                     u880 0686                       u945 0567                       u881 0685  
                     u970 05A7                       u890 068B                       u971 05A6  
                     u891 068A                       u965 058A                       u990 05CA  
                     u991 05C9                       u985 05AD                       _abs 027F  
                     _val 002A                       fsr0 0004           __end_of_ADCInit 02A6  
         __end_of_ADCRead 03E7                       indf 0000              ___awmod@sign 0075  
                    ?_LCD 0070                      l1200 0515                      l1210 0538  
                    l1202 0518                      ?_abs 0076                      l1220 0551  
                    l1212 053E                      l1204 051F                      l1300 0600  
                    l1222 0556                      l1214 053F                      l1206 0523  
                    l1230 0442                      l1310 0627                      l1302 0607  
                    l1400 057E                      l1216 0546                      l1208 0527  
                    l1240 0458                      l1232 0447                      l1320 0661  
                    l1312 0634                      l1304 060B                      l1402 0584  
                    l1410 05A1                      l1218 054C                      l1250 0474  
                    l1242 045B                      l1234 0449                      l1226 043D  
                    l1330 068B                      l1322 0676                      l1314 0639  
                    l1306 060F                      l1412 05A7                      l1420 05C4  
                    l1404 0591                      l1260 0491                      l1252 047A  
                    l1244 0462                      l1236 044D                      l1228 043E  
                    l1332 0694                      l1324 067C                      l1316 063B  
                    l1308 061B                      l1350 02AA                      l1430 0496  
                    l1422 05CA                      l1414 05B4                      l1406 0594  
                    l1190 0500                      l1182 04F4                      l1254 0481  
                    l1246 0466                      l1238 0452                      l1270 03F8  
                    l1334 06A6                      l1326 0681                      l1318 0642  
                    l1342 06BB                      l1352 02B0                      l1432 049C  
                    l1424 05D7                      l1416 05B7                      l1408 059A  
                    l1360 0364                      l1440 02FA                      l1192 0504  
                    l1184 04F5                      l1248 046A                      l1256 0487  
                    l1280 0283                      l1272 0407                      l1264 03E7  
                    l1328 0686                      l1336 06AC                      l1520 06E7  
                    l1450 0290                      l1290 034B                      l1354 02B3  
                    l1434 04A5                      l1426 05DA                      l1418 05BD  
                    l1370 0380                      l1362 0367                      l1442 02FD  
                    l1194 0509                      l1186 04F9                      l1258 048C  
                    l1282 0284                      l1274 0425                      l1266 03EC  
                    l1338 06B3                      l1530 0727                      l1522 06EC  
                    l1514 06D3                      l1460 03A6                      l1452 0392  
                    l1292 0352                      l1356 02BC                      l1348 02A7  
                    l1436 04B4                      l1428 05E0                      l1372 0386  
                    l1364 0375                      l1444 0308                      l1196 050D  
                    l1188 04FE                      l1268 03F1                      l1380 0320  
                    l1540 0759                      l1532 072F                      l1524 06FA  
                    l1516 06D8                      l1462 03AD                      l1470 03D4  
                    l1454 0393                      l1294 0359                      l1286 033C  
                    l1438 04BA                      l1390 055C                      l1374 0389  
                    l1366 0378                      l1358 035E                      l1446 030E  
                    l1198 050F                      l1278 027F                      l1382 032A  
                    l1550 0783                      l1542 075F                      l1534 073D  
                    l1526 0709                      l1518 06DD                      l1472 03D9  
                    l1464 03B4                      l1456 0398                      l1448 025A  
                    l1288 0340                      l1392 0561                      l1376 038E  
                    l1368 037D                      l1296 05EB                      l1384 0338  
                    l1560 07AF                      l1552 0791                      l1544 0767  
                    l1536 0743                      l1528 0718                      l1474 03E0  
                    l1458 039F                      l1394 056E                      l1482 02C0  
                    l1298 05FA                      l1378 031D                      l1490 02DD  
                    l1562 07B7                      l1554 0797                      l1546 0775  
                    l1538 074B                      l1468 03BB                      l1388 0272  
                    l1396 0571                      l1484 02D5                      l1492 02E1  
                    l1564 07BF                      l1556 079F                      l1548 077B  
                    l1590 03C0                      l1398 0577                      l1486 0267  
                    l1494 02E3                      l1566 07C7                      l1558 07A7  
                    l1488 026D                      l1496 02E5                      l1568 07CF  
                    l1498 02EF                      STR_1 0009                      STR_2 000F  
                    STR_3 0015                      STR_4 001B                      u1010 0319  
                    u1011 0318                      u1020 03E0                      u1021 03DF  
                    u1005 05D0                      u1030 026D                      u1031 026C  
                    u1107 04BE                      u1117 02B7                      u1127 03D6  
                    u1057 07DB                      u1067 037A                      u1077 038B  
                    u1087 04A0                      u1097 04AF                      abs@a 0076  
       ?_Lcd_Write_String 0070                      _dbuf 0190                      _main 06D3  
                    _val2 0028                      _val3 0026                      _val4 0024  
                    _prec 0022                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0075           __end_of_Lcd_Cmd 02C0                     ??_LCD 0070  
                   ??_abs 0078                     ?_main 0070           __end_of___awdiv 055B  
         __end_of___awmod 0496           ___awdiv@divisor 0070           ___awdiv@counter 0074  
            vfpfcnvrt@fmt 007A                     _SPBRG 0099                     _TRISB 0086  
                   _TXREG 0019               ?_UART_Write 0070          __end_of_UART_int 02DA  
                   _flags 002C                     _fputc 03E7                     _width 0020  
                   _putch 0259                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 02F9          __end_of_Lcd_Init 04F4  
        __end_of_Lcd_Port 035D           __initialization 07E2              __end_of_main 07E2  
               ??_ADCInit 0070                 ??_ADCRead 0072                    ??_main 005E  
                  ?_fputc 0070                    _ADRESH 001E                    _ADRESL 009E  
        ___awdiv@dividend 0072                    ?_putch 0070                 ??_Lcd_Cmd 0071  
           vfpfcnvrt@done 0041                    _TRISA0 0428                    _TRISA1 0429  
                  _TRISA2 042A              vfprintf@cfmt 004C                 ??___awdiv 0074  
               ??___awmod 0074          ___awdiv@quotient 0076           ___awmod@divisor 0070  
         ___awmod@counter 0074                    fputc@c 0070                    putch@c 0070  
        __end_of_vfprintf 033B                 ??_sprintf 0050           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC         __end_of_Lcd_Clear 027F            __pcstackCOMMON 0070  
               ?_UART_int 0070             __end_of_fputc 043D             __end_of_putch 025A  
          _Lcd_Set_Cursor 055B                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
                 ??_fputc 0073                   ??_putch 0070                __pbssBANK0 0020  
              __pbssBANK1 00A0                __pbssBANK3 0190                __pmaintext 06D3  
              ??_UART_int 0070                   _ADCInit 0290                   _ADCRead 0392  
  __end_of_Lcd_Set_Cursor 05E8              ??_UART_Write 0070                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                __stringtab 0003            _Lcd_Write_Char 035D  
                 _Lcd_Cmd 02A6                   ___awdiv 04F4                   ___awmod 043D  
      __end_of_UART_Write 0272                 ?_vfprintf 0049           ?_Lcd_Set_Cursor 0074  
                 __ptext1 02DA                   __ptext2 031A                   __ptext3 05E8  
                 __ptext4 03E7                   __ptext5 0259                   __ptext6 027F  
                 __ptext7 043D                   __ptext8 04F4                   __ptext9 02C0  
        ___awmod@dividend 0072                   _sprintf 02DA                   clrloop0 025F  
  __end_of_Lcd_Write_Char 0392      end_of_initialization 07FC                   fputc@fp 0072  
       __end_of_vfpfcnvrt 06D3                 _RCSTAbits 0018          vfpfcnvrt@convarg 0044  
               Lcd_Port@a 0070                ??_vfprintf 007E            UART_Write@data 0070  
               _TRISCbits 0087           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0078  
       Lcd_Write_String@i 0076                 _TXSTAbits 0098                 _Lcd_Clear 0272  
             vfpfcnvrt@ap 007B               vfpfcnvrt@cp 0043               vfpfcnvrt@fp 0042  
        _Lcd_Write_String 02F9       start_initialization 07E2               __end_of_LCD 025E  
             __end_of_abs 0290                  ADCRead@x 0070               vfprintf@fmt 0049  
              ?_Lcd_Clear 0070           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
                ?_ADCInit 0070                  ?_ADCRead 0070                 ___latbits 0002  
           __pcstackBANK0 0041                  ?_Lcd_Cmd 0070          ??_Lcd_Set_Cursor 0075  
                ?___awdiv 0070                  ?___awmod 0070                 __pstrings 0003  
                ?_sprintf 004D                 clear_ram0 025E                  Lcd_Cmd@a 0073  
                _GO_nDONE 00FA               ??_Lcd_Clear 0074                  _UART_int 02C0  
               _vfpfcnvrt 05E8                _ADCON0bits 001F               __stringbase 0008  
              _ADCON1bits 009F          ??_Lcd_Write_Char 0071                  _Lcd_Init 0496  
                _Lcd_Port 033B                vfpfcnvrt@c 0048  __end_of_Lcd_Write_String 031A  
              vfprintf@ap 004A                vfprintf@fp 004B                ?_vfpfcnvrt 007A  
      __end_of__stringtab 0009                sprintf@fmt 004D                  __ptext10 0266  
                __ptext11 02F9                  __ptext20 0290                  __ptext12 035D  
                __ptext13 055B                  __ptext14 0496                  __ptext15 0272  
                __ptext16 02A6                  __ptext17 033B                  __ptext18 025A  
                __ptext19 0392                  _vfprintf 031A        Lcd_Write_Char@temp 0072  
               sprintf@ap 0051                 stringcode 0003               ??_vfpfcnvrt 007C  
      Lcd_Set_Cursor@temp 0079                  sprintf@f 0053                  sprintf@s 0052  
                stringdir 0003                  stringtab 0003                _UART_Write 0266  
